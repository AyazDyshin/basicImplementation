{"id":"qgIw","dependencies":[{"name":"C:\\Users\\Shadthepro\\Desktop\\my-demo-app\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\errors\\InruptError.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Shadthepro\\Desktop\\my-demo-app\\node_modules\\@inrupt\\solid-client-authn-core\\src\\errors\\InruptError.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Shadthepro\\Desktop\\my-demo-app\\package.json","includedInParent":true,"mtime":1632614243327},{"name":"C:\\Users\\Shadthepro\\Desktop\\my-demo-app\\node_modules\\@inrupt\\solid-client-authn-core\\package.json","includedInParent":true,"mtime":1632612132798}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});class t extends Error{constructor(e,r,s=!0){super(\"string\"==typeof e?t.substituteParams(e,r):t.appendErrorIri(t.lookupErrorIri(e,r),e,s))}httpResponse(e,r=!0){return this.message=t.appendHttpResponseDetails(this.message,e,r),this.httpErrorResponse=e,this}hasHttpResponse(){return void 0!==this.httpErrorResponse}getHttpResponse(){return this.httpErrorResponse}getHttpStatusCode(){if(void 0===this.httpErrorResponse)throw new t(\"This InruptError was not provided with a HTTP response - so we can't get its HTTP Status Code.\");return this.httpErrorResponse.status}getHttpStatusText(){if(void 0===this.httpErrorResponse)throw new t(\"This InruptError was not provided with a HTTP response - so we can't get its HTTP Status Text!\");return this.httpErrorResponse.statusText}static determineIfVocabTerm(t){return void 0!==t.strict}static lookupErrorIri(e,r){if(t.determineIfVocabTerm(e)){const t=void 0===r?e.message:e.messageParams(...r);return void 0===t?`Looked up error message IRI [${e.value}], but found no message value.`:t}return`Error message looked up at: [${e.value}]${void 0===r?\"\":`, with params [${r.toString()}]`}`}static appendHttpResponseDetails(t,e,r){return r&&void 0!==e?`${t} HTTP details: status code [${e.status}], status text [${e.statusText}].`:t}static appendErrorIri(t,e,r){return r?`${t} Error IRI: [${e.value}].`:t}static substituteParams(t,e){let r=t;if(void 0!==e){const s=t.split(\"{{\").length-1;if(s!==e.length)throw new Error(`Setting parameters on message [${t}], but it requires [${s}] params and we received [${e.length}].`);for(let t=0;t<e.length;t+=1){const s=`{{${t}}}`;r=r.replace(s,e[t])}}return r}}exports.default=t;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":50,"column":0},"generated":{"line":1,"column":68}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":50,"column":21},"generated":{"line":1,"column":74}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":50,"column":41},"generated":{"line":1,"column":84}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":57,"column":2},"generated":{"line":1,"column":90}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":58,"column":4},"generated":{"line":1,"column":102}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":59,"column":4},"generated":{"line":1,"column":104}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":60,"column":4},"generated":{"line":1,"column":106}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":60,"column":21},"generated":{"line":1,"column":109}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":62,"column":4},"generated":{"line":1,"column":112}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":63,"column":30},"generated":{"line":1,"column":118}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":63,"column":13},"generated":{"line":1,"column":135}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":64,"column":10},"generated":{"line":1,"column":137}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":64,"column":22},"generated":{"line":1,"column":139}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":64,"column":39},"generated":{"line":1,"column":156}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":64,"column":53},"generated":{"line":1,"column":158}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":65,"column":10},"generated":{"line":1,"column":161}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":65,"column":22},"generated":{"line":1,"column":163}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":66,"column":12},"generated":{"line":1,"column":178}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":66,"column":24},"generated":{"line":1,"column":180}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":66,"column":39},"generated":{"line":1,"column":195}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":66,"column":53},"generated":{"line":1,"column":197}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":67,"column":12},"generated":{"line":1,"column":200}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":68,"column":12},"generated":{"line":1,"column":202}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":82,"column":9},"generated":{"line":1,"column":206}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":83,"column":4},"generated":{"line":1,"column":219}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":84,"column":4},"generated":{"line":1,"column":221}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":84,"column":24},"generated":{"line":1,"column":224}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":96,"column":4},"generated":{"line":1,"column":227}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":86,"column":4},"generated":{"line":1,"column":234}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":86,"column":9},"generated":{"line":1,"column":239}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":86,"column":19},"generated":{"line":1,"column":247}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":86,"column":31},"generated":{"line":1,"column":249}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":87,"column":6},"generated":{"line":1,"column":275}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":87,"column":11},"generated":{"line":1,"column":280}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":88,"column":6},"generated":{"line":1,"column":288}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":89,"column":6},"generated":{"line":1,"column":290}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":94,"column":4},"generated":{"line":1,"column":293}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":94,"column":9},"generated":{"line":1,"column":298}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":94,"column":29},"generated":{"line":1,"column":316}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":96,"column":11},"generated":{"line":1,"column":318}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":99,"column":2},"generated":{"line":1,"column":323}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":100,"column":4},"generated":{"line":1,"column":341}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":100,"column":38},"generated":{"line":1,"column":353}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":100,"column":11},"generated":{"line":1,"column":357}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":100,"column":16},"generated":{"line":1,"column":362}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":103,"column":2},"generated":{"line":1,"column":380}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":104,"column":4},"generated":{"line":1,"column":398}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":104,"column":11},"generated":{"line":1,"column":405}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":104,"column":16},"generated":{"line":1,"column":410}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":107,"column":2},"generated":{"line":1,"column":428}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":108,"column":4},"generated":{"line":1,"column":448}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":108,"column":35},"generated":{"line":1,"column":456}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":108,"column":8},"generated":{"line":1,"column":460}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":108,"column":13},"generated":{"line":1,"column":465}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":109,"column":6},"generated":{"line":1,"column":483}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":109,"column":12},"generated":{"line":1,"column":489}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":109,"column":16},"generated":{"line":1,"column":493}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":110,"column":8},"generated":{"line":1,"column":495}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":114,"column":4},"generated":{"line":1,"column":593}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":114,"column":11},"generated":{"line":1,"column":600}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":114,"column":16},"generated":{"line":1,"column":605}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":114,"column":34},"generated":{"line":1,"column":623}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":117,"column":2},"generated":{"line":1,"column":630}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":118,"column":4},"generated":{"line":1,"column":650}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":118,"column":35},"generated":{"line":1,"column":658}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":118,"column":8},"generated":{"line":1,"column":662}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":118,"column":13},"generated":{"line":1,"column":667}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":119,"column":6},"generated":{"line":1,"column":685}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":119,"column":12},"generated":{"line":1,"column":691}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":119,"column":16},"generated":{"line":1,"column":695}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":120,"column":8},"generated":{"line":1,"column":697}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":124,"column":4},"generated":{"line":1,"column":795}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":124,"column":11},"generated":{"line":1,"column":802}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":124,"column":16},"generated":{"line":1,"column":807}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":124,"column":34},"generated":{"line":1,"column":825}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":127,"column":2},"generated":{"line":1,"column":836}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":128,"column":4},"generated":{"line":1,"column":864}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":130,"column":4},"generated":{"line":1,"column":867}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":130,"column":40},"generated":{"line":1,"column":879}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":130,"column":9},"generated":{"line":1,"column":883}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":130,"column":29},"generated":{"line":1,"column":885}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":153,"column":2},"generated":{"line":1,"column":892}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":154,"column":4},"generated":{"line":1,"column":914}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":155,"column":4},"generated":{"line":1,"column":916}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":157,"column":4},"generated":{"line":1,"column":919}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":157,"column":8},"generated":{"line":1,"column":922}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":157,"column":20},"generated":{"line":1,"column":924}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":157,"column":41},"generated":{"line":1,"column":945}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":157,"column":47},"generated":{"line":1,"column":948}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":158,"column":6},"generated":{"line":1,"column":949}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":158,"column":12},"generated":{"line":1,"column":955}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":159,"column":26},"generated":{"line":1,"column":962}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":159,"column":8},"generated":{"line":1,"column":966}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":160,"column":12},"generated":{"line":1,"column":968}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":160,"column":16},"generated":{"line":1,"column":970}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":161,"column":12},"generated":{"line":1,"column":978}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":161,"column":16},"generated":{"line":1,"column":980}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":161,"column":33},"generated":{"line":1,"column":997}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":163,"column":6},"generated":{"line":1,"column":1000}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":163,"column":25},"generated":{"line":1,"column":1012}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":163,"column":13},"generated":{"line":1,"column":1016}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":164,"column":42},"generated":{"line":1,"column":1050}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":164,"column":46},"generated":{"line":1,"column":1052}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":165,"column":10},"generated":{"line":1,"column":1090}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":168,"column":4},"generated":{"line":1,"column":1092}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":168,"column":43},"generated":{"line":1,"column":1130}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":168,"column":47},"generated":{"line":1,"column":1132}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":169,"column":24},"generated":{"line":1,"column":1146}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":169,"column":6},"generated":{"line":1,"column":1150}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":170,"column":10},"generated":{"line":1,"column":1152}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":171,"column":28},"generated":{"line":1,"column":1173}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":171,"column":42},"generated":{"line":1,"column":1175}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":183,"column":2},"generated":{"line":1,"column":1191}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":184,"column":4},"generated":{"line":1,"column":1224}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":185,"column":4},"generated":{"line":1,"column":1226}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":186,"column":4},"generated":{"line":1,"column":1228}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":188,"column":4},"generated":{"line":1,"column":1231}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":188,"column":8},"generated":{"line":1,"column":1238}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":188,"column":38},"generated":{"line":1,"column":1246}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":188,"column":25},"generated":{"line":1,"column":1250}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":189,"column":16},"generated":{"line":1,"column":1255}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":189,"column":54},"generated":{"line":1,"column":1287}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":189,"column":63},"generated":{"line":1,"column":1289}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":189,"column":88},"generated":{"line":1,"column":1314}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":189,"column":97},"generated":{"line":1,"column":1316}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":192,"column":11},"generated":{"line":1,"column":1331}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":204,"column":2},"generated":{"line":1,"column":1333}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":205,"column":4},"generated":{"line":1,"column":1355}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":206,"column":4},"generated":{"line":1,"column":1357}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":207,"column":4},"generated":{"line":1,"column":1359}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":209,"column":4},"generated":{"line":1,"column":1362}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":209,"column":11},"generated":{"line":1,"column":1369}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":209,"column":23},"generated":{"line":1,"column":1374}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":209,"column":46},"generated":{"line":1,"column":1391}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":209,"column":50},"generated":{"line":1,"column":1393}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":209,"column":62},"generated":{"line":1,"column":1403}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":223,"column":2},"generated":{"line":1,"column":1405}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":223,"column":26},"generated":{"line":1,"column":1429}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":223,"column":43},"generated":{"line":1,"column":1431}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":224,"column":4},"generated":{"line":1,"column":1434}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":224,"column":8},"generated":{"line":1,"column":1438}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":224,"column":22},"generated":{"line":1,"column":1440}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":225,"column":4},"generated":{"line":1,"column":1442}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":225,"column":19},"generated":{"line":1,"column":1450}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":225,"column":8},"generated":{"line":1,"column":1454}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":225,"column":30},"generated":{"line":1,"column":1456}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":226,"column":6},"generated":{"line":1,"column":1457}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":226,"column":12},"generated":{"line":1,"column":1463}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":226,"column":29},"generated":{"line":1,"column":1465}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":226,"column":37},"generated":{"line":1,"column":1467}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":226,"column":43},"generated":{"line":1,"column":1473}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":226,"column":49},"generated":{"line":1,"column":1479}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":226,"column":58},"generated":{"line":1,"column":1486}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":227,"column":6},"generated":{"line":1,"column":1488}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":227,"column":10},"generated":{"line":1,"column":1491}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":227,"column":29},"generated":{"line":1,"column":1495}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":227,"column":36},"generated":{"line":1,"column":1497}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":228,"column":8},"generated":{"line":1,"column":1504}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":228,"column":14},"generated":{"line":1,"column":1510}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":228,"column":18},"generated":{"line":1,"column":1514}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":229,"column":44},"generated":{"line":1,"column":1554}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":229,"column":74},"generated":{"line":1,"column":1578}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":229,"column":117},"generated":{"line":1,"column":1608}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":229,"column":124},"generated":{"line":1,"column":1610}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":233,"column":6},"generated":{"line":1,"column":1622}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":233,"column":11},"generated":{"line":1,"column":1626}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":233,"column":15},"generated":{"line":1,"column":1630}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":233,"column":19},"generated":{"line":1,"column":1632}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":233,"column":22},"generated":{"line":1,"column":1634}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":233,"column":26},"generated":{"line":1,"column":1636}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":233,"column":33},"generated":{"line":1,"column":1638}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":233,"column":41},"generated":{"line":1,"column":1645}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":233,"column":46},"generated":{"line":1,"column":1648}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":233,"column":49},"generated":{"line":1,"column":1650}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":234,"column":8},"generated":{"line":1,"column":1651}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":234,"column":14},"generated":{"line":1,"column":1657}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":234,"column":28},"generated":{"line":1,"column":1664}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":235,"column":8},"generated":{"line":1,"column":1670}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":235,"column":22},"generated":{"line":1,"column":1672}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":235,"column":34},"generated":{"line":1,"column":1674}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":235,"column":42},"generated":{"line":1,"column":1682}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":235,"column":50},"generated":{"line":1,"column":1684}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":235,"column":57},"generated":{"line":1,"column":1686}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":239,"column":4},"generated":{"line":1,"column":1691}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":239,"column":11},"generated":{"line":1,"column":1698}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":50,"column":0},"generated":{"line":1,"column":1701}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":50,"column":0},"generated":{"line":1,"column":1709}},{"source":"../../src/errors/InruptError.ts","name":null,"original":{"line":50,"column":0},"generated":{"line":1,"column":1717}}],"sources":{"../../src/errors/InruptError.ts":"/*\n * Copyright 2021 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * @hidden\n * The generic Inrupt error class, that simply extends the regular JavaScript\n * [[Error]] object but provides extra capabilities and meta-data (e.g.\n * potentially data from a HTTP response, or with data from an RDF vocabulary\n * (which may be imported locally, or looked up dynamically at runtime)).\n *\n * Error Identifiers\n *   Our error class supports the notion of globally unique, dereferenceable\n *   error identifiers in the form of IRIs.\n *\n * Parameterized error messages\n *   This class supports error messages with positional placeholders that can be\n *   replaced by developer-provided parameter values at runtime.\n *\n * Wrapped Errors (Coming soon!)\n *   Similar to how Java supports the notion of wrapped exceptions, our error\n *   class implementation supports the ability to wrap [[Error]]s.\n *\n * HTTP errors:\n *   This class provides a very convenient means to provide a HTTP response,\n *   the details from which can be appended to error message strings, and the\n *   response itself retrieved directly by consumers of instances of this class.\n * @packageDocumentation\n */\n\nimport { VocabTerm, NamedNode } from \"@inrupt/solid-common-vocab\";\n\nexport default class InruptError extends Error {\n  // For the common case of HTTP errors, we can store the HTTP response to allow\n  // consumers of this error instance to access it directly.\n  // NOTE: we specifically stipulate that we expect the HTTP response to be an\n  // error response!\n  private httpErrorResponse?: Response & { ok: false };\n\n  constructor(\n    messageOrIri: string | NamedNode | VocabTerm,\n    messageParams?: string[],\n    appendErrorIri = true\n  ) {\n    super(\n      typeof messageOrIri === \"string\"\n        ? InruptError.substituteParams(messageOrIri, messageParams)\n        : InruptError.appendErrorIri(\n            InruptError.lookupErrorIri(messageOrIri, messageParams),\n            messageOrIri as NamedNode,\n            appendErrorIri\n          )\n    );\n  }\n\n  /**\n   * Allows us provide a HTTP response, and to specify if we want details from\n   * that response to be appended to our error message string. We also preserve\n   * specific state from that response object to allow consumers of this error\n   * to directly access those if they wish.\n   *\n   * @param httpErrorResponse\n   * @param appendHttpDetails\n   */\n  public httpResponse(\n    httpErrorResponse: Response & { ok: false },\n    appendHttpDetails = true\n  ): InruptError {\n    this.message = InruptError.appendHttpResponseDetails(\n      this.message,\n      httpErrorResponse,\n      appendHttpDetails\n    );\n\n    // Preserve the HTTP response (in case the consumer of this error wishes to\n    // access its details directly themselves).\n    this.httpErrorResponse = httpErrorResponse;\n\n    return this;\n  }\n\n  hasHttpResponse(): boolean {\n    return this.httpErrorResponse !== undefined;\n  }\n\n  getHttpResponse(): (Response & { ok: false }) | undefined {\n    return this.httpErrorResponse;\n  }\n\n  getHttpStatusCode(): number {\n    if (this.httpErrorResponse === undefined) {\n      throw new InruptError(\n        \"This InruptError was not provided with a HTTP response - so we can't get its HTTP Status Code.\"\n      );\n    }\n\n    return this.httpErrorResponse.status;\n  }\n\n  getHttpStatusText(): string {\n    if (this.httpErrorResponse === undefined) {\n      throw new InruptError(\n        \"This InruptError was not provided with a HTTP response - so we can't get its HTTP Status Text!\"\n      );\n    }\n\n    return this.httpErrorResponse.statusText;\n  }\n\n  static determineIfVocabTerm(\n    value: NamedNode | VocabTerm\n  ): value is VocabTerm {\n    if ((value as VocabTerm).strict !== undefined) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Given the IRI for an error message term, first check if it's a local\n   * Vocab Term (in which case we expect the error messages (in potentially\n   * multiple languages) to be accessible directly.\n   * If however the IRI is just a raw IRI, then attempt to lookup the term\n   * dynamically by simply de-referencing it and asking for RDF back (which we\n   * then need to parse and extract the relevant message string).\n   *\n   * NOTE: if we find the referenced term, but it has no explicit message\n   * values associated with it (e.g. the term `https://schema.org/Person` would\n   * resolve, but it has no Vocab Term-defined 'message' triples associated with\n   * it), then we return a fixed message string explaining this, but that\n   * includes the error IRI and the provided parameters.\n   *\n   * @param iri the IRI of the error message term from an RDF vocabulary\n   * @param messageParams parameters to replace expected placeholders in the message string\n   */\n  static lookupErrorIri(\n    iri: NamedNode | VocabTerm,\n    messageParams?: string[]\n  ): string {\n    if (InruptError.determineIfVocabTerm(iri)) {\n      const message =\n        messageParams === undefined\n          ? iri.message\n          : iri.messageParams(...messageParams);\n\n      return message === undefined\n        ? `Looked up error message IRI [${iri.value}], but found no message value.`\n        : message;\n    }\n\n    return `Error message looked up at: [${iri.value}]${\n      messageParams === undefined\n        ? \"\"\n        : `, with params [${messageParams.toString()}]`\n    }`;\n  }\n\n  /**\n   * Convenience method to append certain HTTP response details to our error\n   * message (e.g. the HTTP status code, or the status text).\n   *\n   * @param message the message string to append to\n   * @param response the optional HTTP response\n   * @param append flag telling us to append or not\n   */\n  static appendHttpResponseDetails(\n    message: string,\n    response: Response | undefined,\n    append: boolean\n  ): string {\n    if (append && typeof response !== \"undefined\") {\n      return `${message} HTTP details: status code [${response.status}], status text [${response.statusText}].`;\n    }\n\n    return message;\n  }\n\n  /**\n   * Convenience method to append the error term's IRI value to our error\n   * message (which can be a very helpful reference, since it's basically the ID\n   * of the error message itself).\n   *\n   * @param message the message string to append to\n   * @param iri the IRI of the error term\n   * @param append flag telling us to append or not\n   */\n  static appendErrorIri(\n    message: string,\n    iri: NamedNode,\n    append: boolean\n  ): string {\n    return append ? `${message} Error IRI: [${iri.value}].` : message;\n  }\n\n  /**\n   * Scans the specified message returning a copy with all placeholders replaced\n   * with their corresponding parameter value.\n   *\n   * Note: If the number of parameters provided does not exactly match the\n   * number of placeholders, we throw an exception explaining this (as we\n   * consider it a programmer error).\n   *\n   * @param message the message within which to replace placeholders\n   * @param params the parameters to replaces the placeholders\n   */\n  static substituteParams(message: string, params?: string[]): string {\n    let fullMessage = message;\n    if (params !== undefined) {\n      const paramsRequired = message.split(\"{{\").length - 1;\n      if (paramsRequired !== params.length) {\n        throw new Error(\n          `Setting parameters on message [${message}], but it requires [${paramsRequired}] params and we received [${params.length}].`\n        );\n      }\n\n      for (let i = 0; i < params.length; i += 1) {\n        const marker = `{{${i}}}`;\n        fullMessage = fullMessage.replace(marker, params[i]);\n      }\n    }\n\n    return fullMessage;\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"f1685b2f7344f198936785ff9d0edf60","cacheData":{"env":{}}}