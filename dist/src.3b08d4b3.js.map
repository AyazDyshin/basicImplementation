{"version":3,"sources":["node_modules/n3/src/IRIs.js","node_modules/queue-microtask/index.js","node_modules/n3/src/N3Lexer.js","node_modules/n3/src/N3Util.js","node_modules/n3/src/N3DataFactory.js","node_modules/n3/src/N3Parser.js","node_modules/n3/src/N3Writer.js","node_modules/readable-stream/lib/internal/streams/stream-browser.js","node_modules/readable-stream/lib/internal/streams/buffer_list.js","node_modules/readable-stream/lib/internal/streams/destroy.js","node_modules/readable-stream/errors-browser.js","node_modules/readable-stream/lib/internal/streams/state.js","node_modules/inherits/inherits_browser.js","node_modules/util-deprecate/browser.js","node_modules/readable-stream/lib/_stream_writable.js","node_modules/readable-stream/lib/_stream_duplex.js","node_modules/safe-buffer/index.js","node_modules/string_decoder/lib/string_decoder.js","node_modules/readable-stream/lib/internal/streams/end-of-stream.js","node_modules/readable-stream/lib/internal/streams/async_iterator.js","node_modules/readable-stream/lib/internal/streams/from-browser.js","node_modules/readable-stream/lib/_stream_readable.js","node_modules/readable-stream/lib/_stream_transform.js","node_modules/readable-stream/lib/_stream_passthrough.js","node_modules/readable-stream/lib/internal/streams/pipeline.js","node_modules/readable-stream/readable-browser.js","node_modules/n3/src/N3Store.js","node_modules/n3/src/N3StreamParser.js","node_modules/n3/src/N3StreamWriter.js","node_modules/n3/src/index.js"],"names":["RDF","XSD","SWAP","xsd","decimal","boolean","double","integer","string","rdf","type","nil","first","rest","langString","owl","sameAs","r","forSome","forAll","log","implies","namespaces","escapeSequence","escapeReplacements","illegalIriChars","lineModeRegExps","_iri","_unescapedIri","_simpleQuotedString","_langcode","_blank","_newline","_comment","_whitespace","_endOfFile","invalidRegExp","N3Lexer","constructor","options","_simpleApostropheString","_prefix","_prefixed","_variable","_number","_boolean","_keyword","_sparqlKeyword","_shortPredicates","_lineMode","lineMode","_n3Mode","key","RegExp","n3","_comments","comments","_literalClosingPos","_tokenizeToEnd","callback","inputFinished","input","_input","outputComments","whiteSpaceMatch","comment","exec","line","_line","value","prefix","substr","length","test","firstChar","match","matchLength","inconclusive","_previousMarker","_unescape","reportSyntaxError","_parseLiteral","toUpperCase","token","previousToken","self","_syntaxError","item","invalid","replaced","replace","sequence","unicode4","unicode8","escapedChar","String","fromCharCode","Number","parseInt","charCode","opening","openingLength","closingPos","Math","max","indexOf","backslashCount","raw","substring","lines","split","issue","err","Error","context","undefined","_readStartingBom","startsWith","tokenize","tokens","error","e","t","push","_pendingBuffer","setEncoding","on","data","Buffer","concat","toString","isNamedNode","term","termType","isBlankNode","isLiteral","isVariable","isDefaultGraph","inDefaultGraph","quad","graph","iri","factory","prefixes","defaultPrefixes","Object","create","processPrefix","cache","local","namedNode","N3DataFactory","DEFAULTGRAPH","_blankNodeCounter","escapedLiteral","quadId","DataFactory","blankNode","variable","literal","defaultGraph","triple","Term","id","equals","other","toJSON","NamedNode","Literal","lastIndexOf","language","atPos","toLowerCase","datatype","datatypeString","dtPos","char","BlankNode","name","Variable","DefaultGraph","termFromId","endPos","components","unescapeQuotes","termToId","escapeQuotes","subject","predicate","object","Quad","_subject","_predicate","_object","_graph","_","quoted","languageOrDataType","isFinite","isInteger","isNaN","blankNodePrefix","N3Parser","_contextStack","_setBase","baseIRI","initDataFactory","format","isTurtle","isTriG","isNTriples","isNQuads","isN3","isLineMode","_supportsNamedGraphs","_readPredicateOrNamedGraph","_readPredicate","_supportsQuads","_supportsRDFStar","_resolveRelativeIRI","_blankNodePrefix","_lexer","lexer","_explicitQuantifiers","explicitQuantifiers","_resetBlankNodePrefix","fragmentPos","_base","_basePath","_baseRoot","_baseScheme","_saveContext","n3Mode","inverse","_inversePredicate","blankPrefix","_prefixes","quantified","_quantified","_restoreContext","pop","_readInTopContext","_error","_callback","_sparqlStyle","_readPrefix","_readBaseIRI","_readSubject","_readNamedGraphLabel","_readEntity","quantifier","_resolveIRI","_namedNode","_blankNode","_readBlankNodeHead","RDF_NIL","_readListItem","_readPunctuation","N3_FORSOME","_quantifier","_readQuantifierList","N3_FORALL","_literalValue","_completeSubjectLiteral","_literal","_getPathReader","ABBREVIATIONS","_readBlankNodeTail","_readObject","_readDataTypeOrLang","_getContextEndReader","_readGraph","_readBlankNodePunctuation","_emit","empty","_readPredicateAfterBlank","list","next","previousList","stack","parent","RDF_FIRST","_readListItemDataTypeOrLang","RDF_REST","_completeObjectLiteral","_completeLiteral","listItem","completed","_readCallback","_readFormulaTail","inversePredicate","_readQuadPunctuation","_readPrefixIRI","prefixNode","_prefixCallback","_readDeclarationPunctuation","_readNamedGraphBlankLabel","entity","QUANTIFIERS_GRAPH","_readQuantifierPunctuation","afterPath","_afterPath","_readPath","_readForwardPath","_readBackwardPath","_readRDFStarTailOrGraph","_readRDFStarTail","_quad","contextStack","message","noop","_removeDotSegments","result","i","pathStart","segmentStart","parse","quadCallback","prefixCallback","quads","every","parser","prototype","escape","escapeAll","escapedCharacters","SerializedTerm","N3Writer","outputStream","_prefixRegex","write","_lists","lists","_outputStream","_endStream","end","output","chunk","encoding","done","_writeQuad","_writeQuadLine","_baseIRI","_prefixIRIs","addPrefixes","_inDefaultGraph","_write","_encodeIriOrBlank","_encodeObject","_encodePredicate","_encodeSubject","_prefixMatch","quadToString","quadsToString","map","join","_encodeQuad","characterReplacer","prefixMatch","_encodeLiteral","_blockedWrite","addQuad","addQuads","addPrefix","hasPrefixes","IRIlist","prefixList","prefixIRI","blank","children","child","contents","elements","Array","singleDone","character","charCodeAt","module","exports","require","EventEmitter","ownKeys","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","apply","_objectSpread","target","arguments","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","configurable","writable","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","_require","_require2","inspect","custom","copyBuffer","src","offset","copy","call","BufferList","head","tail","v","entry","ret","s","p","n","alloc","allocUnsafe","hasStrings","slice","shift","_getString","_getBuffer","c","str","nb","buf","depth","customInspect","destroy","cb","_this","readableDestroyed","_readableState","destroyed","writableDestroyed","_writableState","errorEmitted","process","nextTick","emitErrorNT","_destroy","emitCloseNT","emitErrorAndCloseNT","emitClose","emit","undestroy","reading","ended","endEmitted","ending","finalCalled","prefinished","finished","errorOrDestroy","stream","rState","wState","autoDestroy","_inheritsLoose","subClass","superClass","__proto__","codes","createErrorType","code","Base","NodeError","_Base","arg1","arg2","arg3","getMessage","oneOf","expected","thing","isArray","len","search","pos","endsWith","this_len","includes","start","actual","determiner","msg","arg","ERR_INVALID_OPT_VALUE","highWaterMarkFrom","isDuplex","duplexKey","highWaterMark","getHighWaterMark","state","hwm","floor","objectMode","Duplex","WriteReq","CorkedRequest","finish","onCorkedFinish","Writable","WritableState","internalUtil","deprecate","Stream","OurUint8Array","global","Uint8Array","_uint8ArrayToBuffer","from","_isUint8Array","isBuffer","realHasInstance","destroyImpl","_require$codes","ERR_INVALID_ARG_TYPE","ERR_METHOD_NOT_IMPLEMENTED","ERR_MULTIPLE_CALLBACK","ERR_STREAM_CANNOT_PIPE","ERR_STREAM_DESTROYED","ERR_STREAM_NULL_VALUES","ERR_STREAM_WRITE_AFTER_END","ERR_UNKNOWN_ENCODING","nop","writableObjectMode","needDrain","noDecode","decodeStrings","defaultEncoding","writing","corked","sync","bufferProcessing","onwrite","er","writecb","writelen","bufferedRequest","lastBufferedRequest","pendingcb","bufferedRequestCount","corkedRequestsFree","writev","_writev","final","_final","writeAfterEnd","validChunk","decodeChunk","writeOrBuffer","isBuf","newChunk","last","doWrite","onwriteError","finishMaybe","onwriteStateUpdate","needFinish","clearBuffer","afterWrite","onwriteDrain","l","buffer","holder","count","allBuffers","callFinal","prefinish","need","endWritable","once","corkReq","getBuffer","current","out","get","Symbol","hasInstance","Function","pipe","cork","uncork","setDefaultEncoding","set","_undestroy","objectKeys","Readable","method","allowHalfOpen","readable","onend","onEndNT","ERR_STREAM_PREMATURE_CLOSE","called","_len","args","_key","isRequest","setHeader","abort","eos","opts","onlegacyfinish","onfinish","writableEnded","readableEnded","onerror","onclose","onrequest","req","removeListener","_Object$setPrototypeO","kLastResolve","kLastReject","kError","kEnded","kLastPromise","kHandlePromise","kStream","createIterResult","readAndResolve","iter","resolve","read","onReadable","wrapForNext","lastPromise","reject","then","AsyncIteratorPrototype","getPrototypeOf","ReadableStreamAsyncIteratorPrototype","setPrototypeOf","Promise","promise","asyncIterator","_this2","createReadableStreamAsyncIterator","_Object$create","iterator","bind","ReadableState","EE","EElistenerCount","emitter","listeners","debug","debugUtil","debuglog","StringDecoder","ERR_STREAM_PUSH_AFTER_EOF","ERR_STREAM_UNSHIFT_AFTER_END_EVENT","kProxyEvents","prependListener","event","fn","_events","unshift","readableObjectMode","pipes","pipesCount","flowing","needReadable","emittedReadable","readableListening","resumeScheduled","paused","awaitDrain","readingMore","decoder","_read","readableAddChunk","addToFront","skipChunkCheck","onEofChunk","chunkInvalid","addChunk","maybeReadMore","emitReadable","isPaused","enc","content","clear","MAX_HWM","computeNewHighWaterMark","howMuchToRead","emitReadable_","flow","maybeReadMore_","pipeOnDrain","updateReadableListening","listenerCount","resume","nReadingNextTick","resume_","fromList","consume","endReadable","endReadableNT","xs","x","nOrig","doRead","dest","pipeOpts","doEnd","endFn","stdout","stderr","unpipe","onunpipe","unpipeInfo","hasUnpiped","ondrain","ondata","cleanedUp","pause","dests","index","splice","ev","res","addListener","removeAllListeners","wrap","_fromList","iterable","Transform","ERR_TRANSFORM_ALREADY_TRANSFORMING","ERR_TRANSFORM_WITH_LENGTH_0","afterTransform","ts","_transformState","transforming","writechunk","rs","needTransform","writeencoding","transform","_transform","flush","_flush","err2","PassThrough","ERR_MISSING_ARGS","destroyer","closed","to","popCallback","streams","pipeline","destroys","reduce","N3Store","_size","_graphs","_id","_ids","_entities","_blankNodeIndex","_factory","size","graphs","subjects","graphKey","subjectKey","predicateKey","_addToIndex","index0","key0","key1","key2","index1","index2","existed","_removeFromIndex","_findInIndex","name0","name1","name2","array","tmp","varCount","entityKeys","value0","entity0","value1","entity1","values","parts","_loop","_loopByKey0","_loopByKey1","_loopBy2Keys","_countInIndex","_getGraphs","isString","_uniqueEntities","uniqueIds","add","graphItem","predicates","objects","freeze","ids","entities","changed","delete","removeQuad","has","getQuads","import","removeQuads","remove","removeMatches","deleteGraph","subjectId","predicateId","objectId","graphId","DatasetCoreAndReadableStream","countQuads","some","getSubjects","results","forSubjects","getPredicates","forPredicates","getObjects","forObjects","o","getGraphs","forGraphs","g","createBlankNode","suggestedName","extractLists","ignoreErrors","onError","node","tails","toRemove","tailQuad","items","malformed","headPos","objectQuads","subjectQuads","n3Store","assign","filtered","_filtered","N3StreamParser","onData","onEnd","uri","N3StreamWriter","writer","_writer"],"mappings":"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","file":"src.3b08d4b3.js","sourceRoot":"..","sourcesContent":["const RDF  = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n    XSD  = 'http://www.w3.org/2001/XMLSchema#',\n    SWAP = 'http://www.w3.org/2000/10/swap/';\n\nexport default {\n  xsd: {\n    decimal: `${XSD}decimal`,\n    boolean: `${XSD}boolean`,\n    double:  `${XSD}double`,\n    integer: `${XSD}integer`,\n    string:  `${XSD}string`,\n  },\n  rdf: {\n    type:       `${RDF}type`,\n    nil:        `${RDF}nil`,\n    first:      `${RDF}first`,\n    rest:       `${RDF}rest`,\n    langString: `${RDF}langString`,\n  },\n  owl: {\n    sameAs: 'http://www.w3.org/2002/07/owl#sameAs',\n  },\n  r: {\n    forSome: `${SWAP}reify#forSome`,\n    forAll:  `${SWAP}reify#forAll`,\n  },\n  log: {\n    implies: `${SWAP}log#implies`,\n  },\n};\n","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n","// **N3Lexer** tokenizes N3 documents.\nimport namespaces from './IRIs';\nimport queueMicrotask from 'queue-microtask';\n\nconst { xsd } = namespaces;\n\n// Regular expression and replacement string to escape N3 strings\nconst escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\([^])/g;\nconst escapeReplacements = {\n  '\\\\': '\\\\', \"'\": \"'\", '\"': '\"',\n  'n': '\\n', 'r': '\\r', 't': '\\t', 'f': '\\f', 'b': '\\b',\n  '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',\n  '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',\n  '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',\n};\nconst illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\n\nconst lineModeRegExps = {\n  _iri: true,\n  _unescapedIri: true,\n  _simpleQuotedString: true,\n  _langcode: true,\n  _blank: true,\n  _newline: true,\n  _comment: true,\n  _whitespace: true,\n  _endOfFile: true,\n};\nconst invalidRegExp = /$0^/;\n\n// ## Constructor\nexport default class N3Lexer {\n  constructor(options) {\n    // ## Regular expressions\n    // It's slightly faster to have these as properties than as in-scope variables\n    this._iri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/; // IRI with escape sequences; needs sanity check after unescaping\n    this._unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/; // IRI without escape sequences; no unescaping\n    this._simpleQuotedString = /^\"([^\"\\\\\\r\\n]*)\"(?=[^\"])/; // string without escape sequences\n    this._simpleApostropheString = /^'([^'\\\\\\r\\n]*)'(?=[^'])/;\n    this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\\-])/i;\n    this._prefix = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:(?=[#\\s<])/;\n    this._prefixed = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:((?:(?:[0-:A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])(?:(?:[\\.\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])*(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~]))?)?)(?:[ \\t]+|(?=\\.?[,;!\\^\\s#()\\[\\]\\{\\}\"'<>]))/;\n    this._variable = /^\\?(?:(?:[A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?=[.,;!\\^\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._blank = /^_:((?:[0-9A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?:[ \\t]+|(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>]))/;\n    this._number = /^[\\-+]?(?:(\\d+\\.\\d*|\\.?\\d+)[eE][\\-+]?|\\d*(\\.)?)\\d+(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._boolean = /^(?:true|false)(?=[.,;\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._keyword = /^@[a-z]+(?=[\\s#<:])/i;\n    this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\\s#<])/i;\n    this._shortPredicates = /^a(?=[\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._newline = /^[ \\t]*(?:#[^\\n\\r]*)?(?:\\r\\n|\\n|\\r)[ \\t]*/;\n    this._comment = /#([^\\n\\r]*)/;\n    this._whitespace = /^[ \\t]+/;\n    this._endOfFile = /^(?:#[^\\n\\r]*)?$/;\n    options = options || {};\n\n    // In line mode (N-Triples or N-Quads), only simple features may be parsed\n    if (this._lineMode = !!options.lineMode) {\n      this._n3Mode = false;\n      // Don't tokenize special literals\n      for (const key in this) {\n        if (!(key in lineModeRegExps) && this[key] instanceof RegExp)\n          this[key] = invalidRegExp;\n      }\n    }\n    // When not in line mode, enable N3 functionality by default\n    else {\n      this._n3Mode = options.n3 !== false;\n    }\n    // Don't output comment tokens by default\n    this._comments = !!options.comments;\n    // Cache the last tested closing position of long literals\n    this._literalClosingPos = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback\n  _tokenizeToEnd(callback, inputFinished) {\n    // Continue parsing as far as possible; the loop will return eventually\n    let input = this._input;\n    const outputComments = this._comments;\n    while (true) {\n      // Count and skip whitespace lines\n      let whiteSpaceMatch, comment;\n      while (whiteSpaceMatch = this._newline.exec(input)) {\n        // Try to find a comment\n        if (outputComments && (comment = this._comment.exec(whiteSpaceMatch[0])))\n          callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });\n        // Advance the input\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n        this._line++;\n      }\n      // Skip whitespace on current line\n      if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input)))\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n\n      // Stop for now if we're at the end\n      if (this._endOfFile.test(input)) {\n        // If the input is finished, emit EOF\n        if (inputFinished) {\n          // Try to find a final comment\n          if (outputComments && (comment = this._comment.exec(input)))\n            callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });\n          callback(input = null, { line: this._line, type: 'eof', value: '', prefix: '' });\n        }\n        return this._input = input;\n      }\n\n      // Look for specific token types based on the first character\n      const line = this._line, firstChar = input[0];\n      let type = '', value = '', prefix = '',\n          match = null, matchLength = 0, inconclusive = false;\n      switch (firstChar) {\n      case '^':\n        // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed\n        if (input.length < 3)\n          break;\n        // Try to match a type\n        else if (input[1] === '^') {\n          this._previousMarker = '^^';\n          // Move to type IRI or prefixed name\n          input = input.substr(2);\n          if (input[0] !== '<') {\n            inconclusive = true;\n            break;\n          }\n        }\n        // If no type, it must be a path expression\n        else {\n          if (this._n3Mode) {\n            matchLength = 1;\n            type = '^';\n          }\n          break;\n        }\n        // Fall through in case the type is an IRI\n      case '<':\n        // Try to find a full IRI without escape sequences\n        if (match = this._unescapedIri.exec(input))\n          type = 'IRI', value = match[1];\n        // Try to find a full IRI with escape sequences\n        else if (match = this._iri.exec(input)) {\n          value = this._unescape(match[1]);\n          if (value === null || illegalIriChars.test(value))\n            return reportSyntaxError(this);\n          type = 'IRI';\n        }\n        // Try to find a nested triple\n        else if (input.length > 1 && input[1] === '<')\n          type = '<<', matchLength = 2;\n        // Try to find a backwards implication arrow\n        else if (this._n3Mode && input.length > 1 && input[1] === '=')\n          type = 'inverse', matchLength = 2, value = '>';\n        break;\n\n      case '>':\n        if (input.length > 1 && input[1] === '>')\n          type = '>>', matchLength = 2;\n        break;\n\n      case '_':\n        // Try to find a blank node. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a blank node.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if ((match = this._blank.exec(input)) ||\n            inputFinished && (match = this._blank.exec(`${input} `)))\n          type = 'blank', prefix = '_', value = match[1];\n        break;\n\n      case '\"':\n        // Try to find a literal without escape sequences\n        if (match = this._simpleQuotedString.exec(input))\n          value = match[1];\n        // Try to find a literal wrapped in three pairs of quotes\n        else {\n          ({ value, matchLength } = this._parseLiteral(input));\n          if (value === null)\n            return reportSyntaxError(this);\n        }\n        if (match !== null || matchLength !== 0) {\n          type = 'literal';\n          this._literalClosingPos = 0;\n        }\n        break;\n\n      case \"'\":\n        if (!this._lineMode) {\n          // Try to find a literal without escape sequences\n          if (match = this._simpleApostropheString.exec(input))\n            value = match[1];\n          // Try to find a literal wrapped in three pairs of quotes\n          else {\n            ({ value, matchLength } = this._parseLiteral(input));\n            if (value === null)\n              return reportSyntaxError(this);\n          }\n          if (match !== null || matchLength !== 0) {\n            type = 'literal';\n            this._literalClosingPos = 0;\n          }\n        }\n        break;\n\n      case '?':\n        // Try to find a variable\n        if (this._n3Mode && (match = this._variable.exec(input)))\n          type = 'var', value = match[0];\n        break;\n\n      case '@':\n        // Try to find a language code\n        if (this._previousMarker === 'literal' && (match = this._langcode.exec(input)))\n          type = 'langcode', value = match[1];\n        // Try to find a keyword\n        else if (match = this._keyword.exec(input))\n          type = match[0];\n        break;\n\n      case '.':\n        // Try to find a dot as punctuation\n        if (input.length === 1 ? inputFinished : (input[1] < '0' || input[1] > '9')) {\n          type = '.';\n          matchLength = 1;\n          break;\n        }\n        // Fall through to numerical case (could be a decimal dot)\n\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n      case '+':\n      case '-':\n        // Try to find a number. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a number.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if (match = this._number.exec(input) ||\n            inputFinished && (match = this._number.exec(`${input} `))) {\n          type = 'literal', value = match[0];\n          prefix = (typeof match[1] === 'string' ? xsd.double :\n                    (typeof match[2] === 'string' ? xsd.decimal : xsd.integer));\n        }\n        break;\n\n      case 'B':\n      case 'b':\n      case 'p':\n      case 'P':\n      case 'G':\n      case 'g':\n        // Try to find a SPARQL-style keyword\n        if (match = this._sparqlKeyword.exec(input))\n          type = match[0].toUpperCase();\n        else\n          inconclusive = true;\n        break;\n\n      case 'f':\n      case 't':\n        // Try to match a boolean\n        if (match = this._boolean.exec(input))\n          type = 'literal', value = match[0], prefix = xsd.boolean;\n        else\n          inconclusive = true;\n        break;\n\n      case 'a':\n        // Try to find an abbreviated predicate\n        if (match = this._shortPredicates.exec(input))\n          type = 'abbreviation', value = 'a';\n        else\n          inconclusive = true;\n        break;\n\n      case '=':\n        // Try to find an implication arrow or equals sign\n        if (this._n3Mode && input.length > 1) {\n          type = 'abbreviation';\n          if (input[1] !== '>')\n            matchLength = 1, value = '=';\n          else\n            matchLength = 2, value = '>';\n        }\n        break;\n\n      case '!':\n        if (!this._n3Mode)\n          break;\n      case ',':\n      case ';':\n      case '[':\n      case ']':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n        if (!this._lineMode) {\n          matchLength = 1;\n          type = firstChar;\n        }\n        break;\n\n      default:\n        inconclusive = true;\n      }\n\n      // Some first characters do not allow an immediate decision, so inspect more\n      if (inconclusive) {\n        // Try to find a prefix\n        if ((this._previousMarker === '@prefix' || this._previousMarker === 'PREFIX') &&\n            (match = this._prefix.exec(input)))\n          type = 'prefix', value = match[1] || '';\n        // Try to find a prefixed name. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a prefixed name.\n        // Therefore, try inserting a space if we're at the end of the input.\n        else if ((match = this._prefixed.exec(input)) ||\n                 inputFinished && (match = this._prefixed.exec(`${input} `)))\n          type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);\n      }\n\n      // A type token is special: it can only be emitted after an IRI or prefixed name is read\n      if (this._previousMarker === '^^') {\n        switch (type) {\n        case 'prefixed': type = 'type';    break;\n        case 'IRI':      type = 'typeIRI'; break;\n        default:         type = '';\n        }\n      }\n\n      // What if nothing of the above was found?\n      if (!type) {\n        // We could be in streaming mode, and then we just wait for more input to arrive.\n        // Otherwise, a syntax error has occurred in the input.\n        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).\n        if (inputFinished || (!/^'''|^\"\"\"/.test(input) && /\\n|\\r/.test(input)))\n          return reportSyntaxError(this);\n        else\n          return this._input = input;\n      }\n\n      // Emit the parsed token\n      const token = { line: line, type: type, value: value, prefix: prefix };\n      callback(null, token);\n      this.previousToken = token;\n      this._previousMarker = type;\n      // Advance to next part to tokenize\n      input = input.substr(matchLength || match[0].length, input.length);\n    }\n\n    // Signals the syntax error through the callback\n    function reportSyntaxError(self) { callback(self._syntaxError(/^\\S*/.exec(input)[0])); }\n  }\n\n  // ### `_unescape` replaces N3 escape codes by their corresponding characters\n  _unescape(item) {\n    let invalid = false;\n    const replaced = item.replace(escapeSequence, (sequence, unicode4, unicode8, escapedChar) => {\n      // 4-digit unicode character\n      if (typeof unicode4 === 'string')\n        return String.fromCharCode(Number.parseInt(unicode4, 16));\n      // 8-digit unicode character\n      if (typeof unicode8 === 'string') {\n        let charCode = Number.parseInt(unicode8, 16);\n        return charCode <= 0xFFFF ? String.fromCharCode(Number.parseInt(unicode8, 16)) :\n          String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));\n      }\n      // fixed escape sequence\n      if (escapedChar in escapeReplacements)\n        return escapeReplacements[escapedChar];\n      // invalid escape sequence\n      invalid = true;\n      return '';\n    });\n    return invalid ? null : replaced;\n  }\n\n  // ### `_parseLiteral` parses a literal into an unescaped value\n  _parseLiteral(input) {\n    // Ensure we have enough lookahead to identify triple-quoted strings\n    if (input.length >= 3) {\n      // Identify the opening quote(s)\n      const opening = input.match(/^(?:\"\"\"|\"|'''|'|)/)[0];\n      const openingLength = opening.length;\n\n      // Find the next candidate closing quotes\n      let closingPos = Math.max(this._literalClosingPos, openingLength);\n      while ((closingPos = input.indexOf(opening, closingPos)) > 0) {\n        // Count backslashes right before the closing quotes\n        let backslashCount = 0;\n        while (input[closingPos - backslashCount - 1] === '\\\\')\n          backslashCount++;\n\n        // An even number of backslashes (in particular 0)\n        // means these are actual, non-escaped closing quotes\n        if (backslashCount % 2 === 0) {\n          // Extract and unescape the value\n          const raw = input.substring(openingLength, closingPos);\n          const lines = raw.split(/\\r\\n|\\r|\\n/).length - 1;\n          const matchLength = closingPos + openingLength;\n          // Only triple-quoted strings can be multi-line\n          if (openingLength === 1 && lines !== 0 ||\n              openingLength === 3 && this._lineMode)\n            break;\n          this._line += lines;\n          return { value: this._unescape(raw), matchLength };\n        }\n        closingPos++;\n      }\n      this._literalClosingPos = input.length - openingLength + 1;\n    }\n    return { value: '', matchLength: 0 };\n  }\n\n  // ### `_syntaxError` creates a syntax error for the given issue\n  _syntaxError(issue) {\n    this._input = null;\n    const err = new Error(`Unexpected \"${issue}\" on line ${this._line}.`);\n    err.context = {\n      token: undefined,\n      line: this._line,\n      previousToken: this.previousToken,\n    };\n    return err;\n  }\n\n  // ### Strips off any starting UTF BOM mark.\n  _readStartingBom(input) {\n    return input.startsWith('\\ufeff') ? input.substr(1) : input;\n  }\n\n  // ## Public methods\n\n  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.\n  // The input can be a string or a stream.\n  tokenize(input, callback) {\n    this._line = 1;\n\n    // If the input is a string, continuously emit tokens through the callback until the end\n    if (typeof input === 'string') {\n      this._input = this._readStartingBom(input);\n      // If a callback was passed, asynchronously call it\n      if (typeof callback === 'function')\n        queueMicrotask(() => this._tokenizeToEnd(callback, true));\n      // If no callback was passed, tokenize synchronously and return\n      else {\n        const tokens = [];\n        let error;\n        this._tokenizeToEnd((e, t) => e ? (error = e) : tokens.push(t), true);\n        if (error) throw error;\n        return tokens;\n      }\n    }\n    // Otherwise, the input must be a stream\n    else {\n      this._pendingBuffer = null;\n      if (typeof input.setEncoding === 'function')\n        input.setEncoding('utf8');\n      // Adds the data chunk to the buffer and parses as far as possible\n      input.on('data', data => {\n        if (this._input !== null && data.length !== 0) {\n          // Prepend any previous pending writes\n          if (this._pendingBuffer) {\n            data = Buffer.concat([this._pendingBuffer, data]);\n            this._pendingBuffer = null;\n          }\n          // Hold if the buffer ends in an incomplete unicode sequence\n          if (data[data.length - 1] & 0x80) {\n            this._pendingBuffer = data;\n          }\n          // Otherwise, tokenize as far as possible\n          else {\n            // Only read a BOM at the start\n            if (typeof this._input === 'undefined')\n              this._input = this._readStartingBom(typeof data === 'string' ? data : data.toString());\n            else\n              this._input += data;\n            this._tokenizeToEnd(callback, false);\n          }\n        }\n      });\n      // Parses until the end\n      input.on('end', () => {\n        if (typeof this._input === 'string')\n          this._tokenizeToEnd(callback, true);\n      });\n      input.on('error', callback);\n    }\n  }\n}\n","// **N3Util** provides N3 utility functions.\n\nimport N3DataFactory from './N3DataFactory';\n\n// Tests whether the given term represents an IRI\nexport function isNamedNode(term) {\n  return !!term && term.termType === 'NamedNode';\n}\n\n// Tests whether the given term represents a blank node\nexport function isBlankNode(term) {\n  return !!term && term.termType === 'BlankNode';\n}\n\n// Tests whether the given term represents a literal\nexport function isLiteral(term) {\n  return !!term && term.termType === 'Literal';\n}\n\n// Tests whether the given term represents a variable\nexport function isVariable(term) {\n  return !!term && term.termType === 'Variable';\n}\n\n// Tests whether the given term represents the default graph\nexport function isDefaultGraph(term) {\n  return !!term && term.termType === 'DefaultGraph';\n}\n\n// Tests whether the given quad is in the default graph\nexport function inDefaultGraph(quad) {\n  return isDefaultGraph(quad.graph);\n}\n\n// Creates a function that prepends the given IRI to a local name\nexport function prefix(iri, factory) {\n  return prefixes({ '': iri }, factory)('');\n}\n\n// Creates a function that allows registering and expanding prefixes\nexport function prefixes(defaultPrefixes, factory) {\n  // Add all of the default prefixes\n  const prefixes = Object.create(null);\n  for (const prefix in defaultPrefixes)\n    processPrefix(prefix, defaultPrefixes[prefix]);\n  // Set the default factory if none was specified\n  factory = factory || N3DataFactory;\n\n  // Registers a new prefix (if an IRI was specified)\n  // or retrieves a function that expands an existing prefix (if no IRI was specified)\n  function processPrefix(prefix, iri) {\n    // Create a new prefix if an IRI is specified or the prefix doesn't exist\n    if (typeof iri === 'string') {\n      // Create a function that expands the prefix\n      const cache = Object.create(null);\n      prefixes[prefix] = local => {\n        return cache[local] || (cache[local] = factory.namedNode(iri + local));\n      };\n    }\n    else if (!(prefix in prefixes)) {\n      throw new Error(`Unknown prefix: ${prefix}`);\n    }\n    return prefixes[prefix];\n  }\n  return processPrefix;\n}\n","// N3.js implementations of the RDF/JS core data types\n// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md\n\nimport namespaces from './IRIs';\nimport { isDefaultGraph } from './N3Util';\nconst { rdf, xsd } = namespaces;\n\n// eslint-disable-next-line prefer-const\nlet DEFAULTGRAPH;\nlet _blankNodeCounter = 0;\n\nconst escapedLiteral = /^\"(.*\".*)(?=\"[^\"]*$)/;\nconst quadId = /^<<(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) ?(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+)?>>$/;\n\n// ## DataFactory singleton\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  variable,\n  literal,\n  defaultGraph,\n  quad,\n  triple: quad,\n};\nexport default DataFactory;\n\n// ## Term constructor\nexport class Term {\n  constructor(id) {\n    this.id = id;\n  }\n\n  // ### The value of this term\n  get value() {\n    return this.id;\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Term)\n      return this.id === other.id;\n    // Otherwise, compare term type and value\n    return !!other && this.termType === other.termType &&\n                      this.value    === other.value;\n  }\n\n  // ### Returns a plain object representation of this term\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n    };\n  }\n}\n\n\n// ## NamedNode constructor\nexport class NamedNode extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'NamedNode';\n  }\n}\n\n// ## Literal constructor\nexport class Literal extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'Literal';\n  }\n\n  // ### The text value of this literal\n  get value() {\n    return this.id.substring(1, this.id.lastIndexOf('\"'));\n  }\n\n  // ### The language of this literal\n  get language() {\n    // Find the last quotation mark (e.g., '\"abc\"@en-us')\n    const id = this.id;\n    let atPos = id.lastIndexOf('\"') + 1;\n    // If \"@\" it follows, return the remaining substring; empty otherwise\n    return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';\n  }\n\n  // ### The datatype IRI of this literal\n  get datatype() {\n    return new NamedNode(this.datatypeString);\n  }\n\n  // ### The datatype string of this literal\n  get datatypeString() {\n    // Find the last quotation mark (e.g., '\"abc\"^^http://ex.org/types#t')\n    const id = this.id, dtPos = id.lastIndexOf('\"') + 1;\n    const char = dtPos < id.length ? id[dtPos] : '';\n    // If \"^\" it follows, return the remaining substring\n    return char === '^' ? id.substr(dtPos + 2) :\n           // If \"@\" follows, return rdf:langString; xsd:string otherwise\n           (char !== '@' ? xsd.string : rdf.langString);\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both literals were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Literal)\n      return this.id === other.id;\n    // Otherwise, compare term type, value, language, and datatype\n    return !!other && !!other.datatype &&\n                      this.termType === other.termType &&\n                      this.value    === other.value    &&\n                      this.language === other.language &&\n                      this.datatype.value === other.datatype.value;\n  }\n\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n      language: this.language,\n      datatype: { termType: 'NamedNode', value: this.datatypeString },\n    };\n  }\n}\n\n// ## BlankNode constructor\nexport class BlankNode extends Term {\n  constructor(name) {\n    super(`_:${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'BlankNode';\n  }\n\n  // ### The name of this blank node\n  get value() {\n    return this.id.substr(2);\n  }\n}\n\nexport class Variable extends Term {\n  constructor(name) {\n    super(`?${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Variable';\n  }\n\n  // ### The name of this variable\n  get value() {\n    return this.id.substr(1);\n  }\n}\n\n// ## DefaultGraph constructor\nexport class DefaultGraph extends Term {\n  constructor() {\n    super('');\n    return DEFAULTGRAPH || this;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'DefaultGraph';\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through strict equality;\n    // otherwise, compare term types.\n    return (this === other) || (!!other && (this.termType === other.termType));\n  }\n}\n\n// ## DefaultGraph singleton\nDEFAULTGRAPH = new DefaultGraph();\n\n\n// ### Constructs a term from the given internal string ID\nexport function termFromId(id, factory) {\n  factory = factory || DataFactory;\n\n  // Falsy value or empty string indicate the default graph\n  if (!id)\n    return factory.defaultGraph();\n\n  // Identify the term type based on the first character\n  switch (id[0]) {\n  case '?':\n    return factory.variable(id.substr(1));\n  case '_':\n    return factory.blankNode(id.substr(2));\n  case '\"':\n    // Shortcut for internal literals\n    if (factory === DataFactory)\n      return new Literal(id);\n    // Literal without datatype or language\n    if (id[id.length - 1] === '\"')\n      return factory.literal(id.substr(1, id.length - 2));\n    // Literal with datatype or language\n    const endPos = id.lastIndexOf('\"', id.length - 1);\n    return factory.literal(id.substr(1, endPos - 1),\n            id[endPos + 1] === '@' ? id.substr(endPos + 2)\n                                   : factory.namedNode(id.substr(endPos + 3)));\n  case '<':\n    const components = quadId.exec(id);\n    return factory.quad(\n      termFromId(unescapeQuotes(components[1]), factory),\n      termFromId(unescapeQuotes(components[2]), factory),\n      termFromId(unescapeQuotes(components[3]), factory),\n      components[4] && termFromId(unescapeQuotes(components[4]), factory)\n    );\n  default:\n    return factory.namedNode(id);\n  }\n}\n\n// ### Constructs an internal string ID from the given term or ID string\nexport function termToId(term) {\n  if (typeof term === 'string')\n    return term;\n  if (term instanceof Term && term.termType !== 'Quad')\n    return term.id;\n  if (!term)\n    return DEFAULTGRAPH.id;\n\n  // Term instantiated with another library\n  switch (term.termType) {\n  case 'NamedNode':    return term.value;\n  case 'BlankNode':    return `_:${term.value}`;\n  case 'Variable':     return `?${term.value}`;\n  case 'DefaultGraph': return '';\n  case 'Literal':      return `\"${term.value}\"${\n    term.language ? `@${term.language}` :\n      (term.datatype && term.datatype.value !== xsd.string ? `^^${term.datatype.value}` : '')}`;\n  case 'Quad':\n    // To identify RDF* quad components, we escape quotes by doubling them.\n    // This avoids the overhead of backslash parsing of Turtle-like syntaxes.\n    return `<<${\n        escapeQuotes(termToId(term.subject))\n      } ${\n        escapeQuotes(termToId(term.predicate))\n      } ${\n        escapeQuotes(termToId(term.object))\n      }${\n        (isDefaultGraph(term.graph)) ? '' : ` ${termToId(term.graph)}`\n      }>>`;\n  default: throw new Error(`Unexpected termType: ${term.termType}`);\n  }\n}\n\n\n// ## Quad constructor\nexport class Quad extends Term {\n  constructor(subject, predicate, object, graph) {\n    super('');\n    this._subject   = subject;\n    this._predicate = predicate;\n    this._object    = object;\n    this._graph     = graph || DEFAULTGRAPH;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Quad';\n  }\n\n  get subject() {\n    return this._subject;\n  }\n\n  get predicate() {\n    return this._predicate;\n  }\n\n  get object() {\n    return this._object;\n  }\n\n  get graph() {\n    return this._graph;\n  }\n\n  // ### Returns a plain object representation of this quad\n  toJSON() {\n    return {\n      termType:  this.termType,\n      subject:   this._subject.toJSON(),\n      predicate: this._predicate.toJSON(),\n      object:    this._object.toJSON(),\n      graph:     this._graph.toJSON(),\n    };\n  }\n\n  // ### Returns whether this object represents the same quad as the other\n  equals(other) {\n    return !!other && this._subject.equals(other.subject)     &&\n                      this._predicate.equals(other.predicate) &&\n                      this._object.equals(other.object)       &&\n                      this._graph.equals(other.graph);\n  }\n}\nexport { Quad as Triple };\n\n// ### Escapes the quotes within the given literal\nexport function escapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"/g, '\"\"')}`);\n}\n\n// ### Unescapes the quotes within the given literal\nexport function unescapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"\"/g, '\"')}`);\n}\n\n// ### Creates an IRI\nfunction namedNode(iri) {\n  return new NamedNode(iri);\n}\n\n// ### Creates a blank node\nfunction blankNode(name) {\n  return new BlankNode(name || `n3-${_blankNodeCounter++}`);\n}\n\n// ### Creates a literal\nfunction literal(value, languageOrDataType) {\n  // Create a language-tagged string\n  if (typeof languageOrDataType === 'string')\n    return new Literal(`\"${value}\"@${languageOrDataType.toLowerCase()}`);\n\n  // Automatically determine datatype for booleans and numbers\n  let datatype = languageOrDataType ? languageOrDataType.value : '';\n  if (datatype === '') {\n    // Convert a boolean\n    if (typeof value === 'boolean')\n      datatype = xsd.boolean;\n    // Convert an integer or double\n    else if (typeof value === 'number') {\n      if (Number.isFinite(value))\n        datatype = Number.isInteger(value) ? xsd.integer : xsd.double;\n      else {\n        datatype = xsd.double;\n        if (!Number.isNaN(value))\n          value = value > 0 ? 'INF' : '-INF';\n      }\n    }\n  }\n\n  // Create a datatyped literal\n  return (datatype === '' || datatype === xsd.string) ?\n    new Literal(`\"${value}\"`) :\n    new Literal(`\"${value}\"^^${datatype}`);\n}\n\n// ### Creates a variable\nfunction variable(name) {\n  return new Variable(name);\n}\n\n// ### Returns the default graph\nfunction defaultGraph() {\n  return DEFAULTGRAPH;\n}\n\n// ### Creates a quad\nfunction quad(subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph);\n}\n","// **N3Parser** parses N3 documents.\nimport N3Lexer from './N3Lexer';\nimport N3DataFactory from './N3DataFactory';\nimport namespaces from './IRIs';\n\nlet blankNodePrefix = 0;\n\n// ## Constructor\nexport default class N3Parser {\n  constructor(options) {\n    this._contextStack = [];\n    this._graph = null;\n\n    // Set the document IRI\n    options = options || {};\n    this._setBase(options.baseIRI);\n    options.factory && initDataFactory(this, options.factory);\n\n    // Set supported features depending on the format\n    const format = (typeof options.format === 'string') ?\n                 options.format.match(/\\w*$/)[0].toLowerCase() : '',\n        isTurtle = /turtle/.test(format), isTriG = /trig/.test(format),\n        isNTriples = /triple/.test(format), isNQuads = /quad/.test(format),\n        isN3 = this._n3Mode = /n3/.test(format),\n        isLineMode = isNTriples || isNQuads;\n    if (!(this._supportsNamedGraphs = !(isTurtle || isN3)))\n      this._readPredicateOrNamedGraph = this._readPredicate;\n    // Support triples in other graphs\n    this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3);\n    // Support nesting of triples\n    this._supportsRDFStar = format === '' || /star|\\*$/.test(format);\n    // Disable relative IRIs in N-Triples or N-Quads mode\n    if (isLineMode)\n      this._resolveRelativeIRI = iri => { return null; };\n    this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' :\n                              options.blankNodePrefix.replace(/^(?!_:)/, '_:');\n    this._lexer = options.lexer || new N3Lexer({ lineMode: isLineMode, n3: isN3 });\n    // Disable explicit quantifiers by default\n    this._explicitQuantifiers = !!options.explicitQuantifiers;\n  }\n\n  // ## Static class methods\n\n  // ### `_resetBlankNodePrefix` restarts blank node prefix identification\n  static _resetBlankNodePrefix() {\n    blankNodePrefix = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_setBase` sets the base IRI to resolve relative IRIs\n  _setBase(baseIRI) {\n    if (!baseIRI) {\n      this._base = '';\n      this._basePath = '';\n    }\n    else {\n      // Remove fragment if present\n      const fragmentPos = baseIRI.indexOf('#');\n      if (fragmentPos >= 0)\n        baseIRI = baseIRI.substr(0, fragmentPos);\n      // Set base IRI and its components\n      this._base = baseIRI;\n      this._basePath   = baseIRI.indexOf('/') < 0 ? baseIRI :\n                         baseIRI.replace(/[^\\/?]*(?:\\?.*)?$/, '');\n      baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i);\n      this._baseRoot   = baseIRI[0];\n      this._baseScheme = baseIRI[1];\n    }\n  }\n\n  // ### `_saveContext` stores the current parsing context\n  // when entering a new scope (list, blank node, formula)\n  _saveContext(type, graph, subject, predicate, object) {\n    const n3Mode = this._n3Mode;\n    this._contextStack.push({\n      subject: subject, predicate: predicate, object: object,\n      graph: graph, type: type,\n      inverse: n3Mode ? this._inversePredicate : false,\n      blankPrefix: n3Mode ? this._prefixes._ : '',\n      quantified: n3Mode ? this._quantified : null,\n    });\n    // The settings below only apply to N3 streams\n    if (n3Mode) {\n      // Every new scope resets the predicate direction\n      this._inversePredicate = false;\n      // In N3, blank nodes are scoped to a formula\n      // (using a dot as separator, as a blank node label cannot start with it)\n      this._prefixes._ = (this._graph ? `${this._graph.id.substr(2)}.` : '.');\n      // Quantifiers are scoped to a formula\n      this._quantified = Object.create(this._quantified);\n    }\n  }\n\n  // ### `_restoreContext` restores the parent context\n  // when leaving a scope (list, blank node, formula)\n  _restoreContext() {\n    const context = this._contextStack.pop(), n3Mode = this._n3Mode;\n    this._subject   = context.subject;\n    this._predicate = context.predicate;\n    this._object    = context.object;\n    this._graph     = context.graph;\n    // The settings below only apply to N3 streams\n    if (n3Mode) {\n      this._inversePredicate = context.inverse;\n      this._prefixes._ = context.blankPrefix;\n      this._quantified = context.quantified;\n    }\n  }\n\n  // ### `_readInTopContext` reads a token when in the top context\n  _readInTopContext(token) {\n    switch (token.type) {\n    // If an EOF token arrives in the top context, signal that we're done\n    case 'eof':\n      if (this._graph !== null)\n        return this._error('Unclosed graph', token);\n      delete this._prefixes._;\n      return this._callback(null, null, this._prefixes);\n    // It could be a prefix declaration\n    case 'PREFIX':\n      this._sparqlStyle = true;\n    case '@prefix':\n      return this._readPrefix;\n    // It could be a base declaration\n    case 'BASE':\n      this._sparqlStyle = true;\n    case '@base':\n      return this._readBaseIRI;\n    // It could be a graph\n    case '{':\n      if (this._supportsNamedGraphs) {\n        this._graph = '';\n        this._subject = null;\n        return this._readSubject;\n      }\n    case 'GRAPH':\n      if (this._supportsNamedGraphs)\n        return this._readNamedGraphLabel;\n    // Otherwise, the next token must be a subject\n    default:\n      return this._readSubject(token);\n    }\n  }\n\n  // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable\n  _readEntity(token, quantifier) {\n    let value;\n    switch (token.type) {\n    // Read a relative or absolute IRI\n    case 'IRI':\n    case 'typeIRI':\n      const iri = this._resolveIRI(token.value);\n      if (iri === null)\n        return this._error('Invalid IRI', token);\n      value = this._namedNode(iri);\n      break;\n    // Read a prefixed name\n    case 'type':\n    case 'prefixed':\n      const prefix = this._prefixes[token.prefix];\n      if (prefix === undefined)\n        return this._error(`Undefined prefix \"${token.prefix}:\"`, token);\n      value = this._namedNode(prefix + token.value);\n      break;\n    // Read a blank node\n    case 'blank':\n      value = this._blankNode(this._prefixes[token.prefix] + token.value);\n      break;\n    // Read a variable\n    case 'var':\n      value = this._variable(token.value.substr(1));\n      break;\n    // Everything else is not an entity\n    default:\n      return this._error(`Expected entity but got ${token.type}`, token);\n    }\n    // In N3 mode, replace the entity if it is quantified\n    if (!quantifier && this._n3Mode && (value.id in this._quantified))\n      value = this._quantified[value.id];\n    return value;\n  }\n\n  // ### `_readSubject` reads a quad's subject\n  _readSubject(token) {\n    this._predicate = null;\n    switch (token.type) {\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph,\n                        this._subject = this._blankNode(), null, null);\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this.RDF_NIL, null, null);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph,\n                        this._graph = this._blankNode(), null, null);\n      return this._readSubject;\n    case '}':\n       // No subject; the graph in which we are reading is closed instead\n      return this._readPunctuation(token);\n    case '@forSome':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forSome\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORSOME;\n      this._quantifier = this._blankNode;\n      return this._readQuantifierList;\n    case '@forAll':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forAll\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORALL;\n      this._quantifier = this._variable;\n      return this._readQuantifierList;\n    case 'literal':\n      if (!this._n3Mode)\n        return this._error('Unexpected literal', token);\n\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._completeSubjectLiteral;\n      }\n      else\n        this._subject = this._literal(token.value, this._namedNode(token.prefix));\n\n      break;\n    case '<<':\n      if (!this._supportsRDFStar)\n        return this._error('Unexpected RDF* syntax', token);\n      this._saveContext('<<', this._graph, null, null, null);\n      this._graph = null;\n      return this._readSubject;\n    default:\n      // Read the subject entity\n      if ((this._subject = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the subject might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._readPredicateOrNamedGraph);\n    }\n\n    // The next token must be a predicate,\n    // or, if the subject was actually a graph IRI, a named graph\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // ### `_readPredicate` reads a quad's predicate\n  _readPredicate(token) {\n    const type = token.type;\n    switch (type) {\n    case 'inverse':\n      this._inversePredicate = true;\n    case 'abbreviation':\n      this._predicate = this.ABBREVIATIONS[token.value];\n      break;\n    case '.':\n    case ']':\n    case '}':\n      // Expected predicate didn't come, must have been trailing semicolon\n      if (this._predicate === null)\n        return this._error(`Unexpected ${type}`, token);\n      this._subject = null;\n      return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);\n    case ';':\n      // Additional semicolons can be safely ignored\n      return this._predicate !== null ? this._readPredicate :\n             this._error('Expected predicate but got ;', token);\n    case 'blank':\n      if (!this._n3Mode)\n        return this._error('Disallowed blank node as predicate', token);\n    default:\n      if ((this._predicate = this._readEntity(token)) === undefined)\n        return;\n    }\n    // The next token must be an object\n    return this._readObject;\n  }\n\n  // ### `_readObject` reads a quad's object\n  _readObject(token) {\n    switch (token.type) {\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._readDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else\n        this._object = this._literal(token.value, this._namedNode(token.prefix));\n      break;\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph, this._subject, this._predicate,\n                        this._subject = this._blankNode());\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this._subject, this._predicate, this.RDF_NIL);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blankNode());\n      return this._readSubject;\n    case '<<':\n      if (!this._supportsRDFStar)\n        return this._error('Unexpected RDF* syntax', token);\n      this._saveContext('<<', this._graph, this._subject, this._predicate, null);\n      this._graph = null;\n      return this._readSubject;\n    default:\n      // Read the object entity\n      if ((this._object = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the object might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._getContextEndReader());\n    }\n    return this._getContextEndReader();\n  }\n\n  // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph\n  _readPredicateOrNamedGraph(token) {\n    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);\n  }\n\n  // ### `_readGraph` reads a graph\n  _readGraph(token) {\n    if (token.type !== '{')\n      return this._error(`Expected graph but got ${token.type}`, token);\n    // The \"subject\" we read is actually the GRAPH's label\n    this._graph = this._subject, this._subject = null;\n    return this._readSubject;\n  }\n\n  // ### `_readBlankNodeHead` reads the head of a blank node\n  _readBlankNodeHead(token) {\n    if (token.type === ']') {\n      this._subject = null;\n      return this._readBlankNodeTail(token);\n    }\n    else {\n      this._predicate = null;\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readBlankNodeTail` reads the end of a blank node\n  _readBlankNodeTail(token) {\n    if (token.type !== ']')\n      return this._readBlankNodePunctuation(token);\n\n    // Store blank node quad\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this blank node\n    const empty = this._predicate === null;\n    this._restoreContext();\n    // If the blank node was the subject, continue reading the predicate\n    if (this._object === null)\n      // If the blank node was empty, it could be a named graph label\n      return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;\n    // If the blank node was the object, restore previous context and read punctuation\n    else\n      return this._getContextEndReader();\n  }\n\n  // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node\n  _readPredicateAfterBlank(token) {\n    switch (token.type) {\n    case '.':\n    case '}':\n      // No predicate is coming if the triple is terminated here\n      this._subject = null;\n      return this._readPunctuation(token);\n    default:\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readListItem` reads items from a list\n  _readListItem(token) {\n    let item = null,                      // The item of the list\n        list = null,                      // The list itself\n        next = this._readListItem;        // The next function to execute\n    const previousList = this._subject,   // The previous list that contains this list\n        stack = this._contextStack,       // The stack of parent contexts\n        parent = stack[stack.length - 1]; // The parent containing the current list\n\n    switch (token.type) {\n    case '[':\n      // Stack the current list quad and start a new quad with a blank node as subject\n      this._saveContext('blank', this._graph,\n                        list = this._blankNode(), this.RDF_FIRST,\n                        this._subject = item = this._blankNode());\n      next = this._readBlankNodeHead;\n      break;\n    case '(':\n      // Stack the current list quad and start a new list\n      this._saveContext('list', this._graph,\n                        list = this._blankNode(), this.RDF_FIRST, this.RDF_NIL);\n      this._subject = null;\n      break;\n    case ')':\n      // Closing the list; restore the parent context\n      this._restoreContext();\n      // If this list is contained within a parent list, return the membership quad here.\n      // This will be `<parent list element> rdf:first <this list>.`.\n      if (stack.length !== 0 && stack[stack.length - 1].type === 'list')\n        this._emit(this._subject, this._predicate, this._object, this._graph);\n      // Was this list the parent's subject?\n      if (this._predicate === null) {\n        // The next token is the predicate\n        next = this._readPredicate;\n        // No list tail if this was an empty list\n        if (this._subject === this.RDF_NIL)\n          return next;\n      }\n      // The list was in the parent context's object\n      else {\n        next = this._getContextEndReader();\n        // No list tail if this was an empty list\n        if (this._object === this.RDF_NIL)\n          return next;\n      }\n      // Close the list by making the head nil\n      list = this.RDF_NIL;\n      break;\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        next = this._readListItemDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else {\n        item = this._literal(token.value, this._namedNode(token.prefix));\n        next = this._getContextEndReader();\n      }\n      break;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blankNode());\n      return this._readSubject;\n    default:\n      if ((item = this._readEntity(token)) === undefined)\n        return;\n    }\n\n     // Create a new blank node if no item head was assigned yet\n    if (list === null)\n      this._subject = list = this._blankNode();\n\n    // Is this the first element of the list?\n    if (previousList === null) {\n      // This list is either the subject or the object of its parent\n      if (parent.predicate === null)\n        parent.subject = list;\n      else\n        parent.object = list;\n    }\n    else {\n      // Continue the previous list with the current list\n      this._emit(previousList, this.RDF_REST, list, this._graph);\n    }\n    // If an item was read, add it to the list\n    if (item !== null) {\n      // In N3 mode, the item might be a path\n      if (this._n3Mode && (token.type === 'IRI' || token.type === 'prefixed')) {\n        // Create a new context to add the item's path\n        this._saveContext('item', this._graph, list, this.RDF_FIRST, item);\n        this._subject = item, this._predicate = null;\n        // _readPath will restore the context and output the item\n        return this._getPathReader(this._readListItem);\n      }\n      // Output the item\n      this._emit(list, this.RDF_FIRST, item, this._graph);\n    }\n    return next;\n  }\n\n  // ### `_readDataTypeOrLang` reads an _optional_ datatype or language\n  _readDataTypeOrLang(token) {\n    return this._completeObjectLiteral(token, false);\n  }\n\n\n  // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list\n  _readListItemDataTypeOrLang(token) {\n    return this._completeObjectLiteral(token, true);\n  }\n\n  // ### `_completeLiteral` completes a literal with an optional datatype or language\n  _completeLiteral(token) {\n    // Create a simple string literal by default\n    let literal = this._literal(this._literalValue);\n\n    switch (token.type) {\n    // Create a datatyped literal\n    case 'type':\n    case 'typeIRI':\n      const datatype = this._readEntity(token);\n      if (datatype === undefined) return; // No datatype means an error occurred\n      literal = this._literal(this._literalValue, datatype);\n      token = null;\n      break;\n    // Create a language-tagged string\n    case 'langcode':\n      literal = this._literal(this._literalValue, token.value);\n      token = null;\n      break;\n    }\n\n    return { token, literal };\n  }\n\n  // Completes a literal in subject position\n  _completeSubjectLiteral(token) {\n    this._subject = this._completeLiteral(token).literal;\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // Completes a literal in object position\n  _completeObjectLiteral(token, listItem) {\n    const completed = this._completeLiteral(token);\n    if (!completed)\n      return;\n    this._object = completed.literal;\n\n    // If this literal was part of a list, write the item\n    // (we could also check the context stack, but passing in a flag is faster)\n    if (listItem)\n      this._emit(this._subject, this.RDF_FIRST, this._object, this._graph);\n    // If the token was consumed, continue with the rest of the input\n    if (completed.token === null)\n      return this._getContextEndReader();\n    // Otherwise, consume the token now\n    else {\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(completed.token);\n    }\n  }\n\n  // ### `_readFormulaTail` reads the end of a formula\n  _readFormulaTail(token) {\n    if (token.type !== '}')\n      return this._readPunctuation(token);\n\n    // Store the last quad of the formula\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this formula\n    this._restoreContext();\n    // If the formula was the subject, continue reading the predicate.\n    // If the formula was the object, read punctuation.\n    return this._object === null ? this._readPredicate : this._getContextEndReader();\n  }\n\n  // ### `_readPunctuation` reads punctuation between quads or quad parts\n  _readPunctuation(token) {\n    let next, graph = this._graph;\n    const subject = this._subject, inversePredicate = this._inversePredicate;\n    switch (token.type) {\n    // A closing brace ends a graph\n    case '}':\n      if (this._graph === null)\n        return this._error('Unexpected graph closing', token);\n      if (this._n3Mode)\n        return this._readFormulaTail(token);\n      this._graph = null;\n    // A dot just ends the statement, without sharing anything with the next\n    case '.':\n      this._subject = null;\n      next = this._contextStack.length ? this._readSubject : this._readInTopContext;\n      if (inversePredicate) this._inversePredicate = false;\n      break;\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== undefined) {\n        next = this._readQuadPunctuation;\n        break;\n      }\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\n    }\n    // A quad has been completed now, so return it\n    if (subject !== null) {\n      const predicate = this._predicate, object = this._object;\n      if (!inversePredicate)\n        this._emit(subject, predicate, object,  graph);\n      else\n        this._emit(object,  predicate, subject, graph);\n    }\n    return next;\n  }\n\n    // ### `_readBlankNodePunctuation` reads punctuation in a blank node\n  _readBlankNodePunctuation(token) {\n    let next;\n    switch (token.type) {\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\n    }\n    // A quad has been completed now, so return it\n    this._emit(this._subject, this._predicate, this._object, this._graph);\n    return next;\n  }\n\n  // ### `_readQuadPunctuation` reads punctuation after a quad\n  _readQuadPunctuation(token) {\n    if (token.type !== '.')\n      return this._error('Expected dot to follow quad', token);\n    return this._readInTopContext;\n  }\n\n  // ### `_readPrefix` reads the prefix of a prefix declaration\n  _readPrefix(token) {\n    if (token.type !== 'prefix')\n      return this._error('Expected prefix to follow @prefix', token);\n    this._prefix = token.value;\n    return this._readPrefixIRI;\n  }\n\n  // ### `_readPrefixIRI` reads the IRI of a prefix declaration\n  _readPrefixIRI(token) {\n    if (token.type !== 'IRI')\n      return this._error(`Expected IRI to follow prefix \"${this._prefix}:\"`, token);\n    const prefixNode = this._readEntity(token);\n    this._prefixes[this._prefix] = prefixNode.value;\n    this._prefixCallback(this._prefix, prefixNode);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readBaseIRI` reads the IRI of a base declaration\n  _readBaseIRI(token) {\n    const iri = token.type === 'IRI' && this._resolveIRI(token.value);\n    if (!iri)\n      return this._error('Expected valid IRI to follow base declaration', token);\n    this._setBase(iri);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readNamedGraphLabel` reads the label of a named graph\n  _readNamedGraphLabel(token) {\n    switch (token.type) {\n    case 'IRI':\n    case 'blank':\n    case 'prefixed':\n      return this._readSubject(token), this._readGraph;\n    case '[':\n      return this._readNamedGraphBlankLabel;\n    default:\n      return this._error('Invalid graph label', token);\n    }\n  }\n\n  // ### `_readNamedGraphLabel` reads a blank node label of a named graph\n  _readNamedGraphBlankLabel(token) {\n    if (token.type !== ']')\n      return this._error('Invalid graph label', token);\n    this._subject = this._blankNode();\n    return this._readGraph;\n  }\n\n  // ### `_readDeclarationPunctuation` reads the punctuation of a declaration\n  _readDeclarationPunctuation(token) {\n    // SPARQL-style declarations don't have punctuation\n    if (this._sparqlStyle) {\n      this._sparqlStyle = false;\n      return this._readInTopContext(token);\n    }\n\n    if (token.type !== '.')\n      return this._error('Expected declaration to end with a dot', token);\n    return this._readInTopContext;\n  }\n\n  // Reads a list of quantified symbols from a @forSome or @forAll statement\n  _readQuantifierList(token) {\n    let entity;\n    switch (token.type) {\n    case 'IRI':\n    case 'prefixed':\n      if ((entity = this._readEntity(token, true)) !== undefined)\n        break;\n    default:\n      return this._error(`Unexpected ${token.type}`, token);\n    }\n    // Without explicit quantifiers, map entities to a quantified entity\n    if (!this._explicitQuantifiers)\n      this._quantified[entity.id] = this._quantifier(this._blankNode().value);\n    // With explicit quantifiers, output the reified quantifier\n    else {\n      // If this is the first item, start a new quantifier list\n      if (this._subject === null)\n        this._emit(this._graph || this.DEFAULTGRAPH, this._predicate,\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\n      // Otherwise, continue the previous list\n      else\n        this._emit(this._subject, this.RDF_REST,\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\n      // Output the list item\n      this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);\n    }\n    return this._readQuantifierPunctuation;\n  }\n\n  // Reads punctuation from a @forSome or @forAll statement\n  _readQuantifierPunctuation(token) {\n    // Read more quantifiers\n    if (token.type === ',')\n      return this._readQuantifierList;\n    // End of the quantifier list\n    else {\n      // With explicit quantifiers, close the quantifier list\n      if (this._explicitQuantifiers) {\n        this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);\n        this._subject = null;\n      }\n      // Read a dot\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(token);\n    }\n  }\n\n  // ### `_getPathReader` reads a potential path and then resumes with the given function\n  _getPathReader(afterPath) {\n    this._afterPath = afterPath;\n    return this._readPath;\n  }\n\n  // ### `_readPath` reads a potential path\n  _readPath(token) {\n    switch (token.type) {\n    // Forward path\n    case '!': return this._readForwardPath;\n    // Backward path\n    case '^': return this._readBackwardPath;\n    // Not a path; resume reading where we left off\n    default:\n      const stack = this._contextStack, parent = stack.length && stack[stack.length - 1];\n      // If we were reading a list item, we still need to output it\n      if (parent && parent.type === 'item') {\n        // The list item is the remaining subejct after reading the path\n        const item = this._subject;\n        // Switch back to the context of the list\n        this._restoreContext();\n        // Output the list item\n        this._emit(this._subject, this.RDF_FIRST, item, this._graph);\n      }\n      return this._afterPath(token);\n    }\n  }\n\n  // ### `_readForwardPath` reads a '!' path\n  _readForwardPath(token) {\n    let subject, predicate;\n    const object = this._blankNode();\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's object\n    if (this._predicate === null)\n      subject = this._subject, this._subject = object;\n    // If we were reading an object, replace the subject by the path's object\n    else\n      subject = this._object,  this._object  = object;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readBackwardPath` reads a '^' path\n  _readBackwardPath(token) {\n    const subject = this._blankNode();\n    let predicate, object;\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's subject\n    if (this._predicate === null)\n      object = this._subject, this._subject = subject;\n    // If we were reading an object, replace the subject by the path's subject\n    else\n      object = this._object,  this._object  = subject;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readRDFStarTailOrGraph` reads the graph of a nested RDF* quad or the end of a nested RDF* triple\n  _readRDFStarTailOrGraph(token) {\n    if (token.type !== '>>') {\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (this._graph = this._readEntity(token)) !== undefined)\n        return this._readRDFStarTail;\n      return this._error(`Expected >> to follow \"${this._object.id}\"`, token);\n    }\n    return this._readRDFStarTail(token);\n  }\n\n  // ### `_readRDFStarTail` reads the end of a nested RDF* triple\n  _readRDFStarTail(token) {\n    if (token.type !== '>>')\n      return this._error(`Expected >> but got ${token.type}`, token);\n    // Read the quad and restore the previous context\n    const quad = this._quad(this._subject, this._predicate, this._object,\n      this._graph || this.DEFAULTGRAPH);\n    this._restoreContext();\n    // If the triple was the subject, continue by reading the predicate.\n    if (this._subject === null) {\n      this._subject = quad;\n      return this._readPredicate;\n    }\n    // If the triple was the object, read context end.\n    else {\n      this._object = quad;\n      return this._getContextEndReader();\n    }\n  }\n\n  // ### `_getContextEndReader` gets the next reader function at the end of a context\n  _getContextEndReader() {\n    const contextStack = this._contextStack;\n    if (!contextStack.length)\n      return this._readPunctuation;\n\n    switch (contextStack[contextStack.length - 1].type) {\n    case 'blank':\n      return this._readBlankNodeTail;\n    case 'list':\n      return this._readListItem;\n    case 'formula':\n      return this._readFormulaTail;\n    case '<<':\n      return this._readRDFStarTailOrGraph;\n    }\n  }\n\n  // ### `_emit` sends a quad through the callback\n  _emit(subject, predicate, object, graph) {\n    this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));\n  }\n\n  // ### `_error` emits an error message through the callback\n  _error(message, token) {\n    const err = new Error(`${message} on line ${token.line}.`);\n    err.context = {\n      token: token,\n      line: token.line,\n      previousToken: this._lexer.previousToken,\n    };\n    this._callback(err);\n    this._callback = noop;\n  }\n\n  // ### `_resolveIRI` resolves an IRI against the base path\n  _resolveIRI(iri) {\n    return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);\n  }\n\n  // ### `_resolveRelativeIRI` resolves an IRI against the base path,\n  // assuming that a base path has been set and that the IRI is indeed relative\n  _resolveRelativeIRI(iri) {\n    // An empty relative IRI indicates the base IRI\n    if (!iri.length)\n      return this._base;\n    // Decide resolving strategy based in the first character\n    switch (iri[0]) {\n    // Resolve relative fragment IRIs against the base IRI\n    case '#': return this._base + iri;\n    // Resolve relative query string IRIs by replacing the query string\n    case '?': return this._base.replace(/(?:\\?.*)?$/, iri);\n    // Resolve root-relative IRIs at the root of the base IRI\n    case '/':\n      // Resolve scheme-relative IRIs to the scheme\n      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);\n    // Resolve all other IRIs at the base IRI's path\n    default:\n      // Relative IRIs cannot contain a colon in the first path segment\n      return (/^[^/:]*:/.test(iri)) ? null : this._removeDotSegments(this._basePath + iri);\n    }\n  }\n\n  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986\n  _removeDotSegments(iri) {\n    // Don't modify the IRI if it does not contain any dot segments\n    if (!/(^|\\/)\\.\\.?($|[/#?])/.test(iri))\n      return iri;\n\n    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'\n    const length = iri.length;\n    let result = '', i = -1, pathStart = -1, segmentStart = 0, next = '/';\n\n    while (i < length) {\n      switch (next) {\n      // The path starts with the first slash after the authority\n      case ':':\n        if (pathStart < 0) {\n          // Skip two slashes before the authority\n          if (iri[++i] === '/' && iri[++i] === '/')\n            // Skip to slash after the authority\n            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')\n              i = pathStart;\n        }\n        break;\n      // Don't modify a query string or fragment\n      case '?':\n      case '#':\n        i = length;\n        break;\n      // Handle '/.' or '/..' path segments\n      case '/':\n        if (iri[i + 1] === '.') {\n          next = iri[++i + 1];\n          switch (next) {\n          // Remove a '/.' segment\n          case '/':\n            result += iri.substring(segmentStart, i - 1);\n            segmentStart = i + 1;\n            break;\n          // Remove a trailing '/.' segment\n          case undefined:\n          case '?':\n          case '#':\n            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);\n          // Remove a '/..' segment\n          case '.':\n            next = iri[++i + 1];\n            if (next === undefined || next === '/' || next === '?' || next === '#') {\n              result += iri.substring(segmentStart, i - 2);\n              // Try to remove the parent path from result\n              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)\n                result = result.substr(0, segmentStart);\n              // Remove a trailing '/..' segment\n              if (next !== '/')\n                return `${result}/${iri.substr(i + 1)}`;\n              segmentStart = i + 1;\n            }\n          }\n        }\n      }\n      next = iri[++i];\n    }\n    return result + iri.substring(segmentStart);\n  }\n\n  // ## Public methods\n\n  // ### `parse` parses the N3 input and emits each parsed quad through the callback\n  parse(input, quadCallback, prefixCallback) {\n    // The read callback is the next function to be executed when a token arrives.\n    // We start reading in the top context.\n    this._readCallback = this._readInTopContext;\n    this._sparqlStyle = false;\n    this._prefixes = Object.create(null);\n    this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2)\n                                             : `b${blankNodePrefix++}_`;\n    this._prefixCallback = prefixCallback || noop;\n    this._inversePredicate = false;\n    this._quantified = Object.create(null);\n\n    // Parse synchronously if no quad callback is given\n    if (!quadCallback) {\n      const quads = [];\n      let error;\n      this._callback = (e, t) => { e ? (error = e) : t && quads.push(t); };\n      this._lexer.tokenize(input).every(token => {\n        return this._readCallback = this._readCallback(token);\n      });\n      if (error) throw error;\n      return quads;\n    }\n\n    // Parse asynchronously otherwise, executing the read callback when a token arrives\n    this._callback = quadCallback;\n    this._lexer.tokenize(input, (error, token) => {\n      if (error !== null)\n        this._callback(error), this._callback = noop;\n      else if (this._readCallback)\n        this._readCallback = this._readCallback(token);\n    });\n  }\n}\n\n// The empty function\nfunction noop() {}\n\n// Initializes the parser with the given data factory\nfunction initDataFactory(parser, factory) {\n  // Set factory methods\n  const namedNode = factory.namedNode;\n  parser._namedNode   = namedNode;\n  parser._blankNode   = factory.blankNode;\n  parser._literal     = factory.literal;\n  parser._variable    = factory.variable;\n  parser._quad        = factory.quad;\n  parser.DEFAULTGRAPH = factory.defaultGraph();\n\n  // Set common named nodes\n  parser.RDF_FIRST  = namedNode(namespaces.rdf.first);\n  parser.RDF_REST   = namedNode(namespaces.rdf.rest);\n  parser.RDF_NIL    = namedNode(namespaces.rdf.nil);\n  parser.N3_FORALL  = namedNode(namespaces.r.forAll);\n  parser.N3_FORSOME = namedNode(namespaces.r.forSome);\n  parser.ABBREVIATIONS = {\n    'a': namedNode(namespaces.rdf.type),\n    '=': namedNode(namespaces.owl.sameAs),\n    '>': namedNode(namespaces.log.implies),\n  };\n  parser.QUANTIFIERS_GRAPH = namedNode('urn:n3:quantifiers');\n}\ninitDataFactory(N3Parser.prototype, N3DataFactory);\n","// **N3Writer** writes N3 documents.\nimport namespaces from './IRIs';\nimport { default as N3DataFactory, Term } from './N3DataFactory';\nimport { isDefaultGraph } from './N3Util';\n\nconst DEFAULTGRAPH = N3DataFactory.defaultGraph();\n\nconst { rdf, xsd } = namespaces;\n\n// Characters in literals that require escaping\nconst escape    = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n    escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n    escapedCharacters = {\n      '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\n      '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f',\n    };\n\n// ## Placeholder class to represent already pretty-printed terms\nclass SerializedTerm extends Term {\n  // Pretty-printed nodes are not equal to any other node\n  // (e.g., [] does not equal [])\n  equals() {\n    return false;\n  }\n}\n\n// ## Constructor\nexport default class N3Writer {\n  constructor(outputStream, options) {\n    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\n    this._prefixRegex = /$0^/;\n\n    // Shift arguments if the first argument is not a stream\n    if (outputStream && typeof outputStream.write !== 'function')\n      options = outputStream, outputStream = null;\n    options = options || {};\n    this._lists = options.lists;\n\n    // If no output stream given, send the output as string through the end callback\n    if (!outputStream) {\n      let output = '';\n      this._outputStream = {\n        write(chunk, encoding, done) { output += chunk; done && done(); },\n        end: done => { done && done(null, output); },\n      };\n      this._endStream = true;\n    }\n    else {\n      this._outputStream = outputStream;\n      this._endStream = options.end === undefined ? true : !!options.end;\n    }\n\n    // Initialize writer, depending on the format\n    this._subject = null;\n    if (!(/triple|quad/i).test(options.format)) {\n      this._lineMode = false;\n      this._graph = DEFAULTGRAPH;\n      this._baseIRI = options.baseIRI;\n      this._prefixIRIs = Object.create(null);\n      options.prefixes && this.addPrefixes(options.prefixes);\n    }\n    else {\n      this._lineMode = true;\n      this._writeQuad = this._writeQuadLine;\n    }\n  }\n\n  // ## Private methods\n\n  // ### Whether the current graph is the default graph\n  get _inDefaultGraph() {\n    return DEFAULTGRAPH.equals(this._graph);\n  }\n\n  // ### `_write` writes the argument to the output stream\n  _write(string, callback) {\n    this._outputStream.write(string, 'utf8', callback);\n  }\n\n  // ### `_writeQuad` writes the quad to the output stream\n  _writeQuad(subject, predicate, object, graph, done) {\n    try {\n      // Write the graph's label if it has changed\n      if (!graph.equals(this._graph)) {\n        // Close the previous graph and start the new one\n        this._write((this._subject === null ? '' : (this._inDefaultGraph ? '.\\n' : '\\n}\\n')) +\n                    (DEFAULTGRAPH.equals(graph) ? '' : `${this._encodeIriOrBlank(graph)} {\\n`));\n        this._graph = graph;\n        this._subject = null;\n      }\n      // Don't repeat the subject if it's the same\n      if (subject.equals(this._subject)) {\n        // Don't repeat the predicate if it's the same\n        if (predicate.equals(this._predicate))\n          this._write(`, ${this._encodeObject(object)}`, done);\n        // Same subject, different predicate\n        else\n          this._write(`;\\n    ${\n                      this._encodePredicate(this._predicate = predicate)} ${\n                      this._encodeObject(object)}`, done);\n      }\n      // Different subject; write the whole quad\n      else\n        this._write(`${(this._subject === null ? '' : '.\\n') +\n                    this._encodeSubject(this._subject = subject)} ${\n                    this._encodePredicate(this._predicate = predicate)} ${\n                    this._encodeObject(object)}`, done);\n    }\n    catch (error) { done && done(error); }\n  }\n\n  // ### `_writeQuadLine` writes the quad to the output stream as a single line\n  _writeQuadLine(subject, predicate, object, graph, done) {\n    // Write the quad without prefixes\n    delete this._prefixMatch;\n    this._write(this.quadToString(subject, predicate, object, graph), done);\n  }\n\n  // ### `quadToString` serializes a quad as a string\n  quadToString(subject, predicate, object, graph) {\n    return  `${this._encodeSubject(subject)} ${\n            this._encodeIriOrBlank(predicate)} ${\n            this._encodeObject(object)\n            }${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .\\n` : ' .\\n'}`;\n  }\n\n  // ### `quadsToString` serializes an array of quads as a string\n  quadsToString(quads) {\n    return quads.map(t => {\n      return this.quadToString(t.subject, t.predicate, t.object, t.graph);\n    }).join('');\n  }\n\n  // ### `_encodeSubject` represents a subject\n  _encodeSubject(entity) {\n    return entity.termType === 'Quad' ?\n      this._encodeQuad(entity) : this._encodeIriOrBlank(entity);\n  }\n\n  // ### `_encodeIriOrBlank` represents an IRI or blank node\n  _encodeIriOrBlank(entity) {\n    // A blank node or list is represented as-is\n    if (entity.termType !== 'NamedNode') {\n      // If it is a list head, pretty-print it\n      if (this._lists && (entity.value in this._lists))\n        entity = this.list(this._lists[entity.value]);\n      return 'id' in entity ? entity.id : `_:${entity.value}`;\n    }\n    let iri = entity.value;\n    // Use relative IRIs if requested and possible\n    if (this._baseIRI && iri.startsWith(this._baseIRI))\n      iri = iri.substr(this._baseIRI.length);\n    // Escape special characters\n    if (escape.test(iri))\n      iri = iri.replace(escapeAll, characterReplacer);\n    // Try to represent the IRI as prefixed name\n    const prefixMatch = this._prefixRegex.exec(iri);\n    return !prefixMatch ? `<${iri}>` :\n           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);\n  }\n\n  // ### `_encodeLiteral` represents a literal\n  _encodeLiteral(literal) {\n    // Escape special characters\n    let value = literal.value;\n    if (escape.test(value))\n      value = value.replace(escapeAll, characterReplacer);\n\n    // Write a language-tagged literal\n    if (literal.language)\n      return `\"${value}\"@${literal.language}`;\n\n    // Write dedicated literals per data type\n    if (this._lineMode) {\n      // Only abbreviate strings in N-Triples or N-Quads\n      if (literal.datatype.value === xsd.string)\n        return `\"${value}\"`;\n    }\n    else {\n      // Use common datatype abbreviations in Turtle or TriG\n      switch (literal.datatype.value) {\n      case xsd.string:\n        return `\"${value}\"`;\n      case xsd.boolean:\n        if (value === 'true' || value === 'false')\n          return value;\n        break;\n      case xsd.integer:\n        if (/^[+-]?\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.decimal:\n        if (/^[+-]?\\d*\\.\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.double:\n        if (/^[+-]?(?:\\d+\\.\\d*|\\.?\\d+)[eE][+-]?\\d+$/.test(value))\n          return value;\n        break;\n      }\n    }\n\n    // Write a regular datatyped literal\n    return `\"${value}\"^^${this._encodeIriOrBlank(literal.datatype)}`;\n  }\n\n  // ### `_encodePredicate` represents a predicate\n  _encodePredicate(predicate) {\n    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);\n  }\n\n  // ### `_encodeObject` represents an object\n  _encodeObject(object) {\n    switch (object.termType) {\n    case 'Quad':\n      return this._encodeQuad(object);\n    case 'Literal':\n      return this._encodeLiteral(object);\n    default:\n      return this._encodeIriOrBlank(object);\n    }\n  }\n\n  // ### `_encodeQuad` encodes an RDF* quad\n  _encodeQuad({ subject, predicate, object, graph }) {\n    return `<<${\n      this._encodeSubject(subject)} ${\n      this._encodePredicate(predicate)} ${\n      this._encodeObject(object)}${\n      isDefaultGraph(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;\n  }\n\n  // ### `_blockedWrite` replaces `_write` after the writer has been closed\n  _blockedWrite() {\n    throw new Error('Cannot write because the writer has been closed.');\n  }\n\n  // ### `addQuad` adds the quad to the output stream\n  addQuad(subject, predicate, object, graph, done) {\n    // The quad was given as an object, so shift parameters\n    if (object === undefined)\n      this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);\n    // The optional `graph` parameter was not provided\n    else if (typeof graph === 'function')\n      this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);\n    // The `graph` parameter was provided\n    else\n      this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);\n  }\n\n  // ### `addQuads` adds the quads to the output stream\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `addPrefix` adds the prefix to the output stream\n  addPrefix(prefix, iri, done) {\n    const prefixes = {};\n    prefixes[prefix] = iri;\n    this.addPrefixes(prefixes, done);\n  }\n\n  // ### `addPrefixes` adds the prefixes to the output stream\n  addPrefixes(prefixes, done) {\n    // Ignore prefixes if not supported by the serialization\n    if (!this._prefixIRIs)\n      return done && done();\n\n    // Write all new prefixes\n    let hasPrefixes = false;\n    for (let prefix in prefixes) {\n      let iri = prefixes[prefix];\n      if (typeof iri !== 'string')\n        iri = iri.value;\n      hasPrefixes = true;\n      // Finish a possible pending quad\n      if (this._subject !== null) {\n        this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n        this._subject = null, this._graph = '';\n      }\n      // Store and write the prefix\n      this._prefixIRIs[iri] = (prefix += ':');\n      this._write(`@prefix ${prefix} <${iri}>.\\n`);\n    }\n    // Recreate the prefix matcher\n    if (hasPrefixes) {\n      let IRIlist = '', prefixList = '';\n      for (const prefixIRI in this._prefixIRIs) {\n        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;\n        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];\n      }\n      IRIlist = IRIlist.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n      this._prefixRegex = new RegExp(`^(?:${prefixList})[^\\/]*$|` +\n                                     `^(${IRIlist})([a-zA-Z][\\\\-_a-zA-Z0-9]*)$`);\n    }\n    // End a prefix block with a newline\n    this._write(hasPrefixes ? '\\n' : '', done);\n  }\n\n  // ### `blank` creates a blank node with the given content\n  blank(predicate, object) {\n    let children = predicate, child, length;\n    // Empty blank node\n    if (predicate === undefined)\n      children = [];\n    // Blank node passed as blank(Term(\"predicate\"), Term(\"object\"))\n    else if (predicate.termType)\n      children = [{ predicate: predicate, object: object }];\n    // Blank node passed as blank({ predicate: predicate, object: object })\n    else if (!('length' in predicate))\n      children = [predicate];\n\n    switch (length = children.length) {\n    // Generate an empty blank node\n    case 0:\n      return new SerializedTerm('[]');\n    // Generate a non-nested one-triple blank node\n    case 1:\n      child = children[0];\n      if (!(child.object instanceof SerializedTerm))\n        return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${\n                                  this._encodeObject(child.object)} ]`);\n    // Generate a multi-triple or nested blank node\n    default:\n      let contents = '[';\n      // Write all triples in order\n      for (let i = 0; i < length; i++) {\n        child = children[i];\n        // Write only the object is the predicate is the same as the previous\n        if (child.predicate.equals(predicate))\n          contents += `, ${this._encodeObject(child.object)}`;\n        // Otherwise, write the predicate and the object\n        else {\n          contents += `${(i ? ';\\n  ' : '\\n  ') +\n                      this._encodePredicate(child.predicate)} ${\n                      this._encodeObject(child.object)}`;\n          predicate = child.predicate;\n        }\n      }\n      return new SerializedTerm(`${contents}\\n]`);\n    }\n  }\n\n  // ### `list` creates a list node with the given content\n  list(elements) {\n    const length = elements && elements.length || 0, contents = new Array(length);\n    for (let i = 0; i < length; i++)\n      contents[i] = this._encodeObject(elements[i]);\n    return new SerializedTerm(`(${contents.join(' ')})`);\n  }\n\n  // ### `end` signals the end of the output stream\n  end(done) {\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n      this._subject = null;\n    }\n    // Disallow further writing\n    this._write = this._blockedWrite;\n\n    // Try to end the underlying stream, ensuring done is called exactly one time\n    let singleDone = done && ((error, result) => { singleDone = null, done(error, result); });\n    if (this._endStream) {\n      try { return this._outputStream.end(singleDone); }\n      catch (error) { /* error closing stream */ }\n    }\n    singleDone && singleDone();\n  }\n}\n\n// Replaces a character by its escaped version\nfunction characterReplacer(character) {\n  // Replace a single character by its escaped version\n  let result = escapedCharacters[character];\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n    }\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\n                 character.charCodeAt(1) + 0x2400).toString(16);\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n    }\n  }\n  return result;\n}\n","module.exports = require('events').EventEmitter;\n","'use strict';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar _require2 = require('util'),\n    inspect = _require2.inspect;\n\nvar custom = inspect && inspect.custom || 'inspect';\n\nfunction copyBuffer(src, target, offset) {\n  Buffer.prototype.copy.call(src, target, offset);\n}\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  _createClass(BufferList, [{\n    key: \"push\",\n    value: function push(v) {\n      var entry = {\n        data: v,\n        next: null\n      };\n      if (this.length > 0) this.tail.next = entry;else this.head = entry;\n      this.tail = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"unshift\",\n    value: function unshift(v) {\n      var entry = {\n        data: v,\n        next: this.head\n      };\n      if (this.length === 0) this.tail = entry;\n      this.head = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      if (this.length === 0) return;\n      var ret = this.head.data;\n      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n      --this.length;\n      return ret;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = this.tail = null;\n      this.length = 0;\n    }\n  }, {\n    key: \"join\",\n    value: function join(s) {\n      if (this.length === 0) return '';\n      var p = this.head;\n      var ret = '' + p.data;\n\n      while (p = p.next) {\n        ret += s + p.data;\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(n) {\n      if (this.length === 0) return Buffer.alloc(0);\n      var ret = Buffer.allocUnsafe(n >>> 0);\n      var p = this.head;\n      var i = 0;\n\n      while (p) {\n        copyBuffer(p.data, ret, i);\n        i += p.data.length;\n        p = p.next;\n      }\n\n      return ret;\n    } // Consumes a specified amount of bytes or characters from the buffered data.\n\n  }, {\n    key: \"consume\",\n    value: function consume(n, hasStrings) {\n      var ret;\n\n      if (n < this.head.data.length) {\n        // `slice` is the same for buffers and strings.\n        ret = this.head.data.slice(0, n);\n        this.head.data = this.head.data.slice(n);\n      } else if (n === this.head.data.length) {\n        // First chunk is a perfect match.\n        ret = this.shift();\n      } else {\n        // Result spans more than one buffer.\n        ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      return this.head.data;\n    } // Consumes a specified amount of characters from the buffered data.\n\n  }, {\n    key: \"_getString\",\n    value: function _getString(n) {\n      var p = this.head;\n      var c = 1;\n      var ret = p.data;\n      n -= ret.length;\n\n      while (p = p.next) {\n        var str = p.data;\n        var nb = n > str.length ? str.length : n;\n        if (nb === str.length) ret += str;else ret += str.slice(0, n);\n        n -= nb;\n\n        if (n === 0) {\n          if (nb === str.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = str.slice(nb);\n          }\n\n          break;\n        }\n\n        ++c;\n      }\n\n      this.length -= c;\n      return ret;\n    } // Consumes a specified amount of bytes from the buffered data.\n\n  }, {\n    key: \"_getBuffer\",\n    value: function _getBuffer(n) {\n      var ret = Buffer.allocUnsafe(n);\n      var p = this.head;\n      var c = 1;\n      p.data.copy(ret);\n      n -= p.data.length;\n\n      while (p = p.next) {\n        var buf = p.data;\n        var nb = n > buf.length ? buf.length : n;\n        buf.copy(ret, ret.length - n, 0, nb);\n        n -= nb;\n\n        if (n === 0) {\n          if (nb === buf.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = buf.slice(nb);\n          }\n\n          break;\n        }\n\n        ++c;\n      }\n\n      this.length -= c;\n      return ret;\n    } // Make sure the linked list only shows the minimal necessary information.\n\n  }, {\n    key: custom,\n    value: function value(_, options) {\n      return inspect(this, _objectSpread({}, options, {\n        // Only inspect one level.\n        depth: 0,\n        // It should not recurse.\n        customInspect: false\n      }));\n    }\n  }]);\n\n  return BufferList;\n}();","'use strict'; // undocumented cb() API, needed for core, not for public API\n\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err) {\n      if (!this._writableState) {\n        process.nextTick(emitErrorNT, this, err);\n      } else if (!this._writableState.errorEmitted) {\n        this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorNT, this, err);\n      }\n    }\n\n    return this;\n  } // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  } // if this is a duplex stream mark the writable part as destroyed as well\n\n\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      if (!_this._writableState) {\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else if (!_this._writableState.errorEmitted) {\n        _this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else {\n        process.nextTick(emitCloseNT, _this);\n      }\n    } else if (cb) {\n      process.nextTick(emitCloseNT, _this);\n      cb(err);\n    } else {\n      process.nextTick(emitCloseNT, _this);\n    }\n  });\n\n  return this;\n}\n\nfunction emitErrorAndCloseNT(self, err) {\n  emitErrorNT(self, err);\n  emitCloseNT(self);\n}\n\nfunction emitCloseNT(self) {\n  if (self._writableState && !self._writableState.emitClose) return;\n  if (self._readableState && !self._readableState.emitClose) return;\n  self.emit('close');\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finalCalled = false;\n    this._writableState.prefinished = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nfunction errorOrDestroy(stream, err) {\n  // We have tests that rely on errors being emitted\n  // in the same tick, so changing this is semver major.\n  // For now when you opt-in to autoDestroy we allow\n  // the error to be emitted nextTick. In a future\n  // semver major update we should change the default to this.\n  var rState = stream._readableState;\n  var wState = stream._writableState;\n  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy,\n  errorOrDestroy: errorOrDestroy\n};","'use strict';\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar codes = {};\n\nfunction createErrorType(code, message, Base) {\n  if (!Base) {\n    Base = Error;\n  }\n\n  function getMessage(arg1, arg2, arg3) {\n    if (typeof message === 'string') {\n      return message;\n    } else {\n      return message(arg1, arg2, arg3);\n    }\n  }\n\n  var NodeError =\n  /*#__PURE__*/\n  function (_Base) {\n    _inheritsLoose(NodeError, _Base);\n\n    function NodeError(arg1, arg2, arg3) {\n      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;\n    }\n\n    return NodeError;\n  }(Base);\n\n  NodeError.prototype.name = Base.name;\n  NodeError.prototype.code = code;\n  codes[code] = NodeError;\n} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js\n\n\nfunction oneOf(expected, thing) {\n  if (Array.isArray(expected)) {\n    var len = expected.length;\n    expected = expected.map(function (i) {\n      return String(i);\n    });\n\n    if (len > 2) {\n      return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(', '), \", or \") + expected[len - 1];\n    } else if (len === 2) {\n      return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n    } else {\n      return \"of \".concat(thing, \" \").concat(expected[0]);\n    }\n  } else {\n    return \"of \".concat(thing, \" \").concat(String(expected));\n  }\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n\n\nfunction startsWith(str, search, pos) {\n  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n\n\nfunction endsWith(str, search, this_len) {\n  if (this_len === undefined || this_len > str.length) {\n    this_len = str.length;\n  }\n\n  return str.substring(this_len - search.length, this_len) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\n\n\nfunction includes(str, search, start) {\n  if (typeof start !== 'number') {\n    start = 0;\n  }\n\n  if (start + search.length > str.length) {\n    return false;\n  } else {\n    return str.indexOf(search, start) !== -1;\n  }\n}\n\ncreateErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {\n  return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n}, TypeError);\ncreateErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {\n  // determiner: 'must be' or 'must not be'\n  var determiner;\n\n  if (typeof expected === 'string' && startsWith(expected, 'not ')) {\n    determiner = 'must not be';\n    expected = expected.replace(/^not /, '');\n  } else {\n    determiner = 'must be';\n  }\n\n  var msg;\n\n  if (endsWith(name, ' argument')) {\n    // For cases like 'first argument'\n    msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  } else {\n    var type = includes(name, '.') ? 'property' : 'argument';\n    msg = \"The \\\"\".concat(name, \"\\\" \").concat(type, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  }\n\n  msg += \". Received type \".concat(typeof actual);\n  return msg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');\ncreateErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {\n  return 'The ' + name + ' method is not implemented';\n});\ncreateErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');\ncreateErrorType('ERR_STREAM_DESTROYED', function (name) {\n  return 'Cannot call ' + name + ' after a stream was destroyed';\n});\ncreateErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');\ncreateErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');\ncreateErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');\ncreateErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);\ncreateErrorType('ERR_UNKNOWN_ENCODING', function (arg) {\n  return 'Unknown encoding: ' + arg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');\nmodule.exports.codes = codes;\n","'use strict';\n\nvar ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;\n\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n}\n\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n\n  if (hwm != null) {\n    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n      var name = isDuplex ? duplexKey : 'highWaterMark';\n      throw new ERR_INVALID_OPT_VALUE(name, hwm);\n    }\n\n    return Math.floor(hwm);\n  } // Default value\n\n\n  return state.objectMode ? 16 : 16 * 1024;\n}\n\nmodule.exports = {\n  getHighWaterMark: getHighWaterMark\n};","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n'use strict';\n\nmodule.exports = Writable;\n/* <replacement> */\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n} // It seems a linked list but it is not\n// there will be only 2 of these for each stream\n\n\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\n\n\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n/*<replacement>*/\n\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,\n    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,\n    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,\n    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\n\nrequire('inherits')(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n\n  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called\n\n  this.finalCalled = false; // drain event flag.\n\n  this.needDrain = false; // at the start of calling end()\n\n  this.ending = false; // when end() has been called, and returned\n\n  this.ended = false; // when 'finish' is emitted\n\n  this.finished = false; // has it been destroyed\n\n  this.destroyed = false; // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n\n  this.length = 0; // a flag to see when we're in the middle of a write.\n\n  this.writing = false; // when true all writes will be buffered until .uncork() call\n\n  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n\n  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  }; // the callback that the user supplies to write(chunk,encoding,cb)\n\n\n  this.writecb = null; // the amount that is being written when _write is called.\n\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n\n  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n\n  this.prefinished = false; // True if the error was already emitted and should not be thrown again\n\n  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')\n\n  this.autoDestroy = !!options.autoDestroy; // count buffered requests\n\n  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function writableStateBufferGetter() {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})(); // Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\n\n\nvar realHasInstance;\n\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n  this._writableState = new WritableState(options, this, isDuplex); // legacy.\n\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n} // Otherwise people can pipe Writable streams, which is just wrong.\n\n\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb\n\n  errorOrDestroy(stream, er);\n  process.nextTick(cb, er);\n} // Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\n\n\nfunction validChunk(stream, state, chunk, cb) {\n  var er;\n\n  if (chunk === null) {\n    er = new ERR_STREAM_NULL_VALUES();\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\n  }\n\n  if (er) {\n    errorOrDestroy(stream, er);\n    process.nextTick(cb, er);\n    return false;\n  }\n\n  return true;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  this._writableState.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n}); // if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\n\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.\n\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    process.nextTick(cb, er); // this can emit finish, and it will always happen\n    // after error\n\n    process.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er); // this can emit finish, but finish must\n    // always follow error\n\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state) || stream.destroyed;\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n} // Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\n\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n} // if there's something in the buffer waiting, then process it\n\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  } // ignore unnecessary end() calls.\n\n\n  if (!state.ending) endWritable(this, state, cb);\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n\n    if (err) {\n      errorOrDestroy(stream, err);\n    }\n\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.pendingcb++;\n      state.finalCalled = true;\n      process.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n\n  if (need) {\n    prefinish(stream, state);\n\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n\n      if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well\n        var rState = stream._readableState;\n\n        if (!rState || rState.autoDestroy && rState.endEmitted) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  } // reuse the free corkReq.\n\n\n  state.corkedRequestsFree.next = corkReq;\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\n\nWritable.prototype._destroy = function (err, cb) {\n  cb(err);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n'use strict';\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var key in obj) {\n    keys.push(key);\n  }\n\n  return keys;\n};\n/*</replacement>*/\n\n\nmodule.exports = Duplex;\n\nvar Readable = require('./_stream_readable');\n\nvar Writable = require('./_stream_writable');\n\nrequire('inherits')(Duplex, Readable);\n\n{\n  // Allow the keys array to be GC'ed.\n  var keys = objectKeys(Writable.prototype);\n\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  this.allowHalfOpen = true;\n\n  if (options) {\n    if (options.readable === false) this.readable = false;\n    if (options.writable === false) this.writable = false;\n\n    if (options.allowHalfOpen === false) {\n      this.allowHalfOpen = false;\n      this.once('end', onend);\n    }\n  }\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n}); // the no-half-open enforcer\n\nfunction onend() {\n  // If the writable side ended, then we're ok.\n  if (this._writableState.ended) return; // no more data can be written.\n  // But allow more writes to happen in this tick.\n\n  process.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});","/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}","// Ported from https://github.com/mafintosh/end-of-stream with\n// permission from the author, Mathias Buus (@mafintosh).\n'use strict';\n\nvar ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    callback.apply(this, args);\n  };\n}\n\nfunction noop() {}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction eos(stream, opts, callback) {\n  if (typeof opts === 'function') return eos(stream, null, opts);\n  if (!opts) opts = {};\n  callback = once(callback || noop);\n  var readable = opts.readable || opts.readable !== false && stream.readable;\n  var writable = opts.writable || opts.writable !== false && stream.writable;\n\n  var onlegacyfinish = function onlegacyfinish() {\n    if (!stream.writable) onfinish();\n  };\n\n  var writableEnded = stream._writableState && stream._writableState.finished;\n\n  var onfinish = function onfinish() {\n    writable = false;\n    writableEnded = true;\n    if (!readable) callback.call(stream);\n  };\n\n  var readableEnded = stream._readableState && stream._readableState.endEmitted;\n\n  var onend = function onend() {\n    readable = false;\n    readableEnded = true;\n    if (!writable) callback.call(stream);\n  };\n\n  var onerror = function onerror(err) {\n    callback.call(stream, err);\n  };\n\n  var onclose = function onclose() {\n    var err;\n\n    if (readable && !readableEnded) {\n      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n\n    if (writable && !writableEnded) {\n      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n  };\n\n  var onrequest = function onrequest() {\n    stream.req.on('finish', onfinish);\n  };\n\n  if (isRequest(stream)) {\n    stream.on('complete', onfinish);\n    stream.on('abort', onclose);\n    if (stream.req) onrequest();else stream.on('request', onrequest);\n  } else if (writable && !stream._writableState) {\n    // legacy streams\n    stream.on('end', onlegacyfinish);\n    stream.on('close', onlegacyfinish);\n  }\n\n  stream.on('end', onend);\n  stream.on('finish', onfinish);\n  if (opts.error !== false) stream.on('error', onerror);\n  stream.on('close', onclose);\n  return function () {\n    stream.removeListener('complete', onfinish);\n    stream.removeListener('abort', onclose);\n    stream.removeListener('request', onrequest);\n    if (stream.req) stream.req.removeListener('finish', onfinish);\n    stream.removeListener('end', onlegacyfinish);\n    stream.removeListener('close', onlegacyfinish);\n    stream.removeListener('finish', onfinish);\n    stream.removeListener('end', onend);\n    stream.removeListener('error', onerror);\n    stream.removeListener('close', onclose);\n  };\n}\n\nmodule.exports = eos;","'use strict';\n\nvar _Object$setPrototypeO;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar finished = require('./end-of-stream');\n\nvar kLastResolve = Symbol('lastResolve');\nvar kLastReject = Symbol('lastReject');\nvar kError = Symbol('error');\nvar kEnded = Symbol('ended');\nvar kLastPromise = Symbol('lastPromise');\nvar kHandlePromise = Symbol('handlePromise');\nvar kStream = Symbol('stream');\n\nfunction createIterResult(value, done) {\n  return {\n    value: value,\n    done: done\n  };\n}\n\nfunction readAndResolve(iter) {\n  var resolve = iter[kLastResolve];\n\n  if (resolve !== null) {\n    var data = iter[kStream].read(); // we defer if data is null\n    // we can be expecting either 'end' or\n    // 'error'\n\n    if (data !== null) {\n      iter[kLastPromise] = null;\n      iter[kLastResolve] = null;\n      iter[kLastReject] = null;\n      resolve(createIterResult(data, false));\n    }\n  }\n}\n\nfunction onReadable(iter) {\n  // we wait for the next tick, because it might\n  // emit an error with process.nextTick\n  process.nextTick(readAndResolve, iter);\n}\n\nfunction wrapForNext(lastPromise, iter) {\n  return function (resolve, reject) {\n    lastPromise.then(function () {\n      if (iter[kEnded]) {\n        resolve(createIterResult(undefined, true));\n        return;\n      }\n\n      iter[kHandlePromise](resolve, reject);\n    }, reject);\n  };\n}\n\nvar AsyncIteratorPrototype = Object.getPrototypeOf(function () {});\nvar ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n  get stream() {\n    return this[kStream];\n  },\n\n  next: function next() {\n    var _this = this;\n\n    // if we have detected an error in the meanwhile\n    // reject straight away\n    var error = this[kError];\n\n    if (error !== null) {\n      return Promise.reject(error);\n    }\n\n    if (this[kEnded]) {\n      return Promise.resolve(createIterResult(undefined, true));\n    }\n\n    if (this[kStream].destroyed) {\n      // We need to defer via nextTick because if .destroy(err) is\n      // called, the error will be emitted via nextTick, and\n      // we cannot guarantee that there is no error lingering around\n      // waiting to be emitted.\n      return new Promise(function (resolve, reject) {\n        process.nextTick(function () {\n          if (_this[kError]) {\n            reject(_this[kError]);\n          } else {\n            resolve(createIterResult(undefined, true));\n          }\n        });\n      });\n    } // if we have multiple next() calls\n    // we will wait for the previous Promise to finish\n    // this logic is optimized to support for await loops,\n    // where next() is only called once at a time\n\n\n    var lastPromise = this[kLastPromise];\n    var promise;\n\n    if (lastPromise) {\n      promise = new Promise(wrapForNext(lastPromise, this));\n    } else {\n      // fast path needed to support multiple this.push()\n      // without triggering the next() queue\n      var data = this[kStream].read();\n\n      if (data !== null) {\n        return Promise.resolve(createIterResult(data, false));\n      }\n\n      promise = new Promise(this[kHandlePromise]);\n    }\n\n    this[kLastPromise] = promise;\n    return promise;\n  }\n}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {\n  return this;\n}), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n  var _this2 = this;\n\n  // destroy(err, cb) is a private API\n  // we can guarantee we have that here, because we control the\n  // Readable class this is attached to\n  return new Promise(function (resolve, reject) {\n    _this2[kStream].destroy(null, function (err) {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(createIterResult(undefined, true));\n    });\n  });\n}), _Object$setPrototypeO), AsyncIteratorPrototype);\n\nvar createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {\n  var _Object$create;\n\n  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n    value: stream,\n    writable: true\n  }), _defineProperty(_Object$create, kLastResolve, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kLastReject, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kError, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kEnded, {\n    value: stream._readableState.endEmitted,\n    writable: true\n  }), _defineProperty(_Object$create, kHandlePromise, {\n    value: function value(resolve, reject) {\n      var data = iterator[kStream].read();\n\n      if (data) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        resolve(createIterResult(data, false));\n      } else {\n        iterator[kLastResolve] = resolve;\n        iterator[kLastReject] = reject;\n      }\n    },\n    writable: true\n  }), _Object$create));\n  iterator[kLastPromise] = null;\n  finished(stream, function (err) {\n    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise\n      // returned by next() and store the error\n\n      if (reject !== null) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        reject(err);\n      }\n\n      iterator[kError] = err;\n      return;\n    }\n\n    var resolve = iterator[kLastResolve];\n\n    if (resolve !== null) {\n      iterator[kLastPromise] = null;\n      iterator[kLastResolve] = null;\n      iterator[kLastReject] = null;\n      resolve(createIterResult(undefined, true));\n    }\n\n    iterator[kEnded] = true;\n  });\n  stream.on('readable', onReadable.bind(null, iterator));\n  return iterator;\n};\n\nmodule.exports = createReadableStreamAsyncIterator;","module.exports = function () {\n  throw new Error('Readable.from is not available in the browser')\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';\n\nmodule.exports = Readable;\n/*<replacement>*/\n\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n/*<replacement>*/\n\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*<replacement>*/\n\n\nvar debugUtil = require('util');\n\nvar debug;\n\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function debug() {};\n}\n/*</replacement>*/\n\n\nvar BufferList = require('./internal/streams/buffer_list');\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.\n\n\nvar StringDecoder;\nvar createReadableStreamAsyncIterator;\nvar from;\n\nrequire('inherits')(Readable, Stream);\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n\n  this.sync = true; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n  this.paused = true; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')\n\n  this.autoDestroy = !!options.autoDestroy; // has it been destroyed\n\n  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\n\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  this._readableState = new ReadableState(options, this, isDuplex); // legacy\n\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\n\nReadable.prototype._destroy = function (err, cb) {\n  cb(err);\n}; // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\n\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n}; // Unshift should *always* be something directly out of read()\n\n\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  debug('readableAddChunk', chunk);\n  var state = stream._readableState;\n\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n\n    if (er) {\n      errorOrDestroy(stream, er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n      } else if (state.destroyed) {\n        return false;\n      } else {\n        state.reading = false;\n\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n      maybeReadMore(stream, state);\n    }\n  } // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n\n\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    state.awaitDrain = 0;\n    stream.emit('data', chunk);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\n  }\n\n  return er;\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n}; // backwards compatibility.\n\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  var decoder = new StringDecoder(enc);\n  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8\n\n  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:\n\n  var p = this._readableState.buffer.head;\n  var content = '';\n\n  while (p !== null) {\n    content += decoder.write(p.data);\n    p = p.next;\n  }\n\n  this._readableState.buffer.clear();\n\n  if (content !== '') this._readableState.buffer.push(content);\n  this._readableState.length = content.length;\n  return this;\n}; // Don't raise the hwm > 1GB\n\n\nvar MAX_HWM = 0x40000000;\n\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n\n  return n;\n} // This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  } // If we're asking for more than the current hwm, then raise the hwm.\n\n\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n; // Don't have enough\n\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n\n  return state.length;\n} // you can override either this method, or the async _read(n) below.\n\n\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n\n  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n\n  var doRead = state.needReadable;\n  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  } // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.highWaterMark);\n\n    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark;\n    n = 0;\n  } else {\n    state.length -= n;\n    state.awaitDrain = 0;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.\n\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk');\n  if (state.ended) return;\n\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n\n  state.ended = true;\n\n  if (state.sync) {\n    // if we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call\n    emitReadable(stream);\n  } else {\n    // emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false;\n\n    if (!state.emittedReadable) {\n      state.emittedReadable = true;\n      emitReadable_(stream);\n    }\n  }\n} // Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\n\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  debug('emitReadable', state.needReadable, state.emittedReadable);\n  state.needReadable = false;\n\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    process.nextTick(emitReadable_, stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  var state = stream._readableState;\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\n\n  if (!state.destroyed && (state.length || state.ended)) {\n    stream.emit('readable');\n    state.emittedReadable = false;\n  } // The stream needs another readable event if\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n\n\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n  flow(stream);\n} // at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\n\n\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n    var len = state.length;\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length) // didn't get any data, stop spinning.\n      break;\n  }\n\n  state.readingMore = false;\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\n\nReadable.prototype._read = function (n) {\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n\n  function cleanup() {\n    debug('cleanup'); // cleanup event handlers once the pipe is broken\n\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true; // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    debug('dest.write', ret);\n\n    if (ret === false) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', state.awaitDrain);\n        state.awaitDrain++;\n      }\n\n      src.pause();\n    }\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);\n  } // Make sure our error handler is attached before userland ones.\n\n\n  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function pipeOnDrainFunctionResult() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  }; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, {\n        hasUnpiped: false\n      });\n    }\n\n    return this;\n  } // try to find the right one.\n\n\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n}; // set up data events if they are asked for\n// Ensure readable listeners eventually get something\n\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  var state = this._readableState;\n\n  if (ev === 'data') {\n    // update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused\n\n    if (state.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.flowing = false;\n      state.emittedReadable = false;\n      debug('on readable', state.length, state.reading);\n\n      if (state.length) {\n        emitReadable(this);\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this);\n      }\n    }\n  }\n\n  return res;\n};\n\nReadable.prototype.addListener = Readable.prototype.on;\n\nReadable.prototype.removeListener = function (ev, fn) {\n  var res = Stream.prototype.removeListener.call(this, ev, fn);\n\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nReadable.prototype.removeAllListeners = function (ev) {\n  var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nfunction updateReadableListening(self) {\n  var state = self._readableState;\n  state.readableListening = self.listenerCount('readable') > 0;\n\n  if (state.resumeScheduled && !state.paused) {\n    // flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true; // crude way to check if we should resume\n  } else if (self.listenerCount('data') > 0) {\n    self.resume();\n  }\n}\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n} // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\n\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n\n  if (!state.flowing) {\n    debug('resume'); // we flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume()\n\n    state.flowing = !state.readableListening;\n    resume(this, state);\n  }\n\n  state.paused = false;\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  debug('resume', state.reading);\n\n  if (!state.reading) {\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n\n  if (this._readableState.flowing !== false) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n\n  this._readableState.paused = true;\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n\n  while (state.flowing && stream.read() !== null) {\n    ;\n  }\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode\n\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function methodWrap(method) {\n        return function methodWrapReturnFunction() {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  } // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n\n  this._read = function (n) {\n    debug('wrapped _read', n);\n\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nif (typeof Symbol === 'function') {\n  Readable.prototype[Symbol.asyncIterator] = function () {\n    if (createReadableStreamAsyncIterator === undefined) {\n      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');\n    }\n\n    return createReadableStreamAsyncIterator(this);\n  };\n}\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.highWaterMark;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState && this._readableState.buffer;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.flowing;\n  },\n  set: function set(state) {\n    if (this._readableState) {\n      this._readableState.flowing = state;\n    }\n  }\n}); // exposed for testing purposes only.\n\nReadable._fromList = fromList;\nObject.defineProperty(Readable.prototype, 'readableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.length;\n  }\n}); // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = state.buffer.consume(n, state.decoder);\n  }\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n  debug('endReadable', state.endEmitted);\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.\n\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n\n    if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well\n      var wState = stream._writableState;\n\n      if (!wState || wState.autoDestroy && wState.finished) {\n        stream.destroy();\n      }\n    }\n  }\n}\n\nif (typeof Symbol === 'function') {\n  Readable.from = function (iterable, opts) {\n    if (from === undefined) {\n      from = require('./internal/streams/from');\n    }\n\n    return from(Readable, iterable, opts);\n  };\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n\n  return -1;\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n'use strict';\n\nmodule.exports = Transform;\n\nvar _require$codes = require('../errors').codes,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n\nvar Duplex = require('./_stream_duplex');\n\nrequire('inherits')(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n\n  if (cb === null) {\n    return this.emit('error', new ERR_MULTIPLE_CALLBACK());\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n  cb(er);\n  var rs = this._readableState;\n  rs.reading = false;\n\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  }; // start out asking for a readable event once data is transformed.\n\n  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  } // When the writable side finishes, then flush out anything remaining.\n\n\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function' && !this._readableState.destroyed) {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n}; // This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\n\n\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n}; // Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\n\n\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && !ts.transforming) {\n    ts.transforming = true;\n\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n\n  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n  return stream.push(null);\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\nrequire('inherits')(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","// Ported from https://github.com/mafintosh/pump with\n// permission from the author, Mathias Buus (@mafintosh).\n'use strict';\n\nvar eos;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    callback.apply(void 0, arguments);\n  };\n}\n\nvar _require$codes = require('../../../errors').codes,\n    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n\nfunction noop(err) {\n  // Rethrow the error if it exists to avoid swallowing it\n  if (err) throw err;\n}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction destroyer(stream, reading, writing, callback) {\n  callback = once(callback);\n  var closed = false;\n  stream.on('close', function () {\n    closed = true;\n  });\n  if (eos === undefined) eos = require('./end-of-stream');\n  eos(stream, {\n    readable: reading,\n    writable: writing\n  }, function (err) {\n    if (err) return callback(err);\n    closed = true;\n    callback();\n  });\n  var destroyed = false;\n  return function (err) {\n    if (closed) return;\n    if (destroyed) return;\n    destroyed = true; // request.destroy just do .end - .abort is what we want\n\n    if (isRequest(stream)) return stream.abort();\n    if (typeof stream.destroy === 'function') return stream.destroy();\n    callback(err || new ERR_STREAM_DESTROYED('pipe'));\n  };\n}\n\nfunction call(fn) {\n  fn();\n}\n\nfunction pipe(from, to) {\n  return from.pipe(to);\n}\n\nfunction popCallback(streams) {\n  if (!streams.length) return noop;\n  if (typeof streams[streams.length - 1] !== 'function') return noop;\n  return streams.pop();\n}\n\nfunction pipeline() {\n  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n    streams[_key] = arguments[_key];\n  }\n\n  var callback = popCallback(streams);\n  if (Array.isArray(streams[0])) streams = streams[0];\n\n  if (streams.length < 2) {\n    throw new ERR_MISSING_ARGS('streams');\n  }\n\n  var error;\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1;\n    var writing = i > 0;\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err;\n      if (err) destroys.forEach(call);\n      if (reading) return;\n      destroys.forEach(call);\n      callback(error);\n    });\n  });\n  return streams.reduce(pipe);\n}\n\nmodule.exports = pipeline;","exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\nexports.finished = require('./lib/internal/streams/end-of-stream.js');\nexports.pipeline = require('./lib/internal/streams/pipeline.js');\n","// **N3Store** objects store N3 quads by graph in memory.\nimport { default as N3DataFactory, termToId, termFromId } from './N3DataFactory';\nimport { Readable } from 'readable-stream';\nimport namespaces from './IRIs';\n\n// ## Constructor\nexport default class N3Store {\n  constructor(quads, options) {\n    // The number of quads is initially zero\n    this._size = 0;\n    // `_graphs` contains subject, predicate, and object indexes per graph\n    this._graphs = Object.create(null);\n    // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,\n    // saving memory by using only numbers as keys in `_graphs`\n    this._id = 0;\n    this._ids = Object.create(null);\n    this._ids['><'] = 0; // dummy entry, so the first actual key is non-zero\n    this._entities = Object.create(null); // inverse of `_ids`\n    // `_blankNodeIndex` is the index of the last automatically named blank node\n    this._blankNodeIndex = 0;\n\n    // Shift parameters if `quads` is not given\n    if (!options && quads && !quads[0])\n      options = quads, quads = null;\n    options = options || {};\n    this._factory = options.factory || N3DataFactory;\n\n    // Add quads if passed\n    if (quads)\n      this.addQuads(quads);\n  }\n\n  // ## Public properties\n\n  // ### `size` returns the number of quads in the store\n  get size() {\n    // Return the quad count if if was cached\n    let size = this._size;\n    if (size !== null)\n      return size;\n\n    // Calculate the number of quads by counting to the deepest level\n    size = 0;\n    const graphs = this._graphs;\n    let subjects, subject;\n    for (const graphKey in graphs)\n      for (const subjectKey in (subjects = graphs[graphKey].subjects))\n        for (const predicateKey in (subject = subjects[subjectKey]))\n          size += Object.keys(subject[predicateKey]).length;\n    return this._size = size;\n  }\n\n  // ## Private methods\n\n  // ### `_addToIndex` adds a quad to a three-layered index.\n  // Returns if the index has changed, if the entry did not already exist.\n  _addToIndex(index0, key0, key1, key2) {\n    // Create layers as necessary\n    const index1 = index0[key0] || (index0[key0] = {});\n    const index2 = index1[key1] || (index1[key1] = {});\n    // Setting the key to _any_ value signals the presence of the quad\n    const existed = key2 in index2;\n    if (!existed)\n      index2[key2] = null;\n    return !existed;\n  }\n\n  // ### `_removeFromIndex` removes a quad from a three-layered index\n  _removeFromIndex(index0, key0, key1, key2) {\n    // Remove the quad from the index\n    const index1 = index0[key0], index2 = index1[key1];\n    delete index2[key2];\n\n    // Remove intermediary index layers if they are empty\n    for (const key in index2) return;\n    delete index1[key1];\n    for (const key in index1) return;\n    delete index0[key0];\n  }\n\n  // ### `_findInIndex` finds a set of quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  // `name0`, `name1`, and `name2` are the names of the keys at each level,\n  // used when reconstructing the resulting quad\n  // (for instance: _subject_, _predicate_, and _object_).\n  // Finally, `graph` will be the graph of the created quads.\n  // If `callback` is given, each result is passed through it\n  // and iteration halts when it returns truthy for any quad.\n  // If instead `array` is given, each result is added to the array.\n  _findInIndex(index0, key0, key1, key2, name0, name1, name2, graph, callback, array) {\n    let tmp, index1, index2;\n    // Depending on the number of variables, keys or reverse index are faster\n    const varCount = !key0 + !key1 + !key2,\n        entityKeys = varCount > 1 ? Object.keys(this._ids) : this._entities;\n\n    // If a key is specified, use only that part of index 0.\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      const entity0 = entityKeys[value0];\n\n      if (index1 = index0[value0]) {\n        // If a key is specified, use only that part of index 1.\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          const entity1 = entityKeys[value1];\n\n          if (index2 = index1[value1]) {\n            // If a key is specified, use only that part of index 2, if it exists.\n            const values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2);\n            // Create quads for all items found in index 2.\n            for (let l = 0; l < values.length; l++) {\n              const parts = { subject: null, predicate: null, object: null };\n              parts[name0] = termFromId(entity0, this._factory);\n              parts[name1] = termFromId(entity1, this._factory);\n              parts[name2] = termFromId(entityKeys[values[l]], this._factory);\n              const quad = this._factory.quad(\n                parts.subject, parts.predicate, parts.object, termFromId(graph, this._factory));\n              if (array)\n                array.push(quad);\n              else if (callback(quad))\n                return true;\n            }\n          }\n        }\n      }\n    }\n    return array;\n  }\n\n  // ### `_loop` executes the callback on all keys of index 0\n  _loop(index0, callback) {\n    for (const key0 in index0)\n      callback(key0);\n  }\n\n  // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0\n  _loopByKey0(index0, key0, callback) {\n    let index1, key1;\n    if (index1 = index0[key0]) {\n      for (key1 in index1)\n        callback(key1);\n    }\n  }\n\n  // ### `_loopByKey1` executes the callback on given keys of all entries in index 0\n  _loopByKey1(index0, key1, callback) {\n    let key0, index1;\n    for (key0 in index0) {\n      index1 = index0[key0];\n      if (index1[key1])\n        callback(key0);\n    }\n  }\n\n  // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2\n  _loopBy2Keys(index0, key0, key1, callback) {\n    let index1, index2, key2;\n    if ((index1 = index0[key0]) && (index2 = index1[key1])) {\n      for (key2 in index2)\n        callback(key2);\n    }\n  }\n\n  // ### `_countInIndex` counts matching quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  _countInIndex(index0, key0, key1, key2) {\n    let count = 0, tmp, index1, index2;\n\n    // If a key is specified, count only that part of index 0\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      if (index1 = index0[value0]) {\n        // If a key is specified, count only that part of index 1\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          if (index2 = index1[value1]) {\n            // If a key is specified, count the quad if it exists\n            if (key2) (key2 in index2) && count++;\n            // Otherwise, count all quads\n            else count += Object.keys(index2).length;\n          }\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `_getGraphs` returns an array with the given graph,\n  // or all graphs if the argument is null or undefined.\n  _getGraphs(graph) {\n    if (!isString(graph))\n      return this._graphs;\n    const graphs = {};\n    graphs[graph] = this._graphs[graph];\n    return graphs;\n  }\n\n  // ### `_uniqueEntities` returns a function that accepts an entity ID\n  // and passes the corresponding entity to callback if it hasn't occurred before.\n  _uniqueEntities(callback) {\n    const uniqueIds = Object.create(null);\n    return id => {\n      if (!(id in uniqueIds)) {\n        uniqueIds[id] = true;\n        callback(termFromId(this._entities[id], this._factory));\n      }\n    };\n  }\n\n  // ## Public methods\n\n  // ### `add` adds the specified quad to the dataset.\n  // Returns the dataset instance it was called on.\n  // Existing quads, as defined in Quad.equals, will be ignored.\n  add(quad) {\n    this.addQuad(quad);\n    return this;\n  }\n\n  // ### `addQuad` adds a new quad to the store.\n  // Returns if the quad index has changed, if the quad did not already exist.\n  addQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    subject = termToId(subject);\n    predicate = termToId(predicate);\n    object = termToId(object);\n    graph = termToId(graph);\n\n    // Find the graph that will contain the triple\n    let graphItem = this._graphs[graph];\n    // Create the graph if it doesn't exist yet\n    if (!graphItem) {\n      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };\n      // Freezing a graph helps subsequent `add` performance,\n      // and properties will never be modified anyway\n      Object.freeze(graphItem);\n    }\n\n    // Since entities can often be long IRIs, we avoid storing them in every index.\n    // Instead, we have a separate index that maps entities to numbers,\n    // which are then used as keys in the other indexes.\n    const ids = this._ids;\n    const entities = this._entities;\n    subject   = ids[subject]   || (ids[entities[++this._id] = subject]   = this._id);\n    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);\n    object    = ids[object]    || (ids[entities[++this._id] = object]    = this._id);\n\n    const changed = this._addToIndex(graphItem.subjects,   subject,   predicate, object);\n    this._addToIndex(graphItem.predicates, predicate, object,    subject);\n    this._addToIndex(graphItem.objects,    object,    subject,   predicate);\n\n    // The cached quad count is now invalid\n    this._size = null;\n    return changed;\n  }\n\n  // ### `addQuads` adds multiple quads to the store\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `delete` removes the specified quad from the dataset.\n  // Returns the dataset instance it was called on.\n  delete(quad) {\n    this.removeQuad(quad);\n    return this;\n  }\n\n  // ### `has` determines whether a dataset includes a certain quad.\n  // Returns true or false as appropriate.\n  has(quad) {\n    const quads = this.getQuads(quad.subject, quad.predicate, quad.object, quad.graph);\n    return quads.length !== 0;\n  }\n\n  // ### `import` adds a stream of quads to the store\n  import(stream) {\n    stream.on('data', quad => { this.addQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeQuad` removes a quad from the store if it exists\n  removeQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    subject = termToId(subject);\n    predicate = termToId(predicate);\n    object = termToId(object);\n    graph = termToId(graph);\n\n    // Find internal identifiers for all components\n    // and verify the quad exists.\n    const ids = this._ids, graphs = this._graphs;\n    let graphItem, subjects, predicates;\n    if (!(subject    = ids[subject]) || !(predicate = ids[predicate]) ||\n        !(object     = ids[object])  || !(graphItem = graphs[graph])  ||\n        !(subjects   = graphItem.subjects[subject]) ||\n        !(predicates = subjects[predicate]) ||\n        !(object in predicates))\n      return false;\n\n    // Remove it from all indexes\n    this._removeFromIndex(graphItem.subjects,   subject,   predicate, object);\n    this._removeFromIndex(graphItem.predicates, predicate, object,    subject);\n    this._removeFromIndex(graphItem.objects,    object,    subject,   predicate);\n    if (this._size !== null) this._size--;\n\n    // Remove the graph if it is empty\n    for (subject in graphItem.subjects) return true;\n    delete graphs[graph];\n    return true;\n  }\n\n  // ### `removeQuads` removes multiple quads from the store\n  removeQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.removeQuad(quads[i]);\n  }\n\n  // ### `remove` removes a stream of quads from the store\n  remove(stream) {\n    stream.on('data', quad => { this.removeQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeMatches` removes all matching quads from the store\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  removeMatches(subject, predicate, object, graph) {\n    const stream = new Readable({ objectMode: true });\n\n    stream._read = () => {\n      for (const quad of this.getQuads(subject, predicate, object, graph))\n        stream.push(quad);\n      stream.push(null);\n    };\n\n    return this.remove(stream);\n  }\n\n  // ### `deleteGraph` removes all triples with the given graph from the store\n  deleteGraph(graph) {\n    return this.removeMatches(null, null, null, graph);\n  }\n\n  // ### `getQuads` returns an array of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getQuads(subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const quads = [], graphs = this._getGraphs(graph), ids = this._ids;\n    let content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return quads;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the object index will be the fastest\n            this._findInIndex(content.objects, objectId, subjectId, predicateId,\n                              'object', 'subject', 'predicate', graphId, null, quads);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            this._findInIndex(content.subjects, subjectId, predicateId, null,\n                              'subject', 'predicate', 'object', graphId, null, quads);\n        }\n        else if (predicateId)\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          this._findInIndex(content.predicates, predicateId, objectId, null,\n                            'predicate', 'object', 'subject', graphId, null, quads);\n        else if (objectId)\n          // If only object is given, the object index will be the fastest\n          this._findInIndex(content.objects, objectId, null, null,\n                            'object', 'subject', 'predicate', graphId, null, quads);\n        else\n          // If nothing is given, iterate subjects and predicates first\n          this._findInIndex(content.subjects, null, null, null,\n                            'subject', 'predicate', 'object', graphId, null, quads);\n      }\n    }\n    return quads;\n  }\n\n  // ### `match` returns a new dataset that is comprised of all quads in the current instance matching the given arguments.\n  // The logic described in Quad Matching is applied for each quad in this dataset to check if it should be included in the output dataset.\n  // Note: This method always returns a new DatasetCore, even if that dataset contains no quads.\n  // Note: Since a DatasetCore is an unordered set, the order of the quads within the returned sequence is arbitrary.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  // For backwards compatibility, the object return also implements the Readable stream interface.\n  match(subject, predicate, object, graph) {\n    return new DatasetCoreAndReadableStream(this, subject, predicate, object, graph);\n  }\n\n  // ### `countQuads` returns the number of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  countQuads(subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const graphs = this._getGraphs(graph), ids = this._ids;\n    let count = 0, content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return 0;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subject) {\n          if (object)\n            // If subject and object are given, the object index will be the fastest\n            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);\n        }\n        else if (predicate) {\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);\n        }\n        else {\n          // If only object is possibly given, the object index will be the fastest\n          count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `forEach` executes the callback on all quads.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forEach(callback, subject, predicate, object, graph) {\n    this.some(quad => {\n      callback(quad);\n      return false;\n    }, subject, predicate, object, graph);\n  }\n\n  // ### `every` executes the callback on all quads,\n  // and returns `true` if it returns truthy for all them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  every(callback, subject, predicate, object, graph) {\n    let some = false;\n    const every = !this.some(quad => {\n      some = true;\n      return !callback(quad);\n    }, subject, predicate, object, graph);\n    return some && every;\n  }\n\n  // ### `some` executes the callback on all quads,\n  // and returns `true` if it returns truthy for any of them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  some(callback, subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const graphs = this._getGraphs(graph), ids = this._ids;\n    let content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return false;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId) {\n          // If subject and object are given, the object index will be the fastest\n            if (this._findInIndex(content.objects, objectId, subjectId, predicateId,\n                                  'object', 'subject', 'predicate', graphId, callback, null))\n              return true;\n          }\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            if (this._findInIndex(content.subjects, subjectId, predicateId, null,\n                                  'subject', 'predicate', 'object', graphId, callback, null))\n              return true;\n        }\n        else if (predicateId) {\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          if (this._findInIndex(content.predicates, predicateId, objectId, null,\n                                'predicate', 'object', 'subject', graphId, callback, null)) {\n            return true;\n          }\n        }\n        else if (objectId) {\n          // If only object is given, the object index will be the fastest\n          if (this._findInIndex(content.objects, objectId, null, null,\n                                'object', 'subject', 'predicate', graphId, callback, null)) {\n            return true;\n          }\n        }\n        else\n        // If nothing is given, iterate subjects and predicates first\n        if (this._findInIndex(content.subjects, null, null, null,\n                              'subject', 'predicate', 'object', graphId, callback, null)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  // ### `getSubjects` returns all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getSubjects(predicate, object, graph) {\n    const results = [];\n    this.forSubjects(s => { results.push(s); }, predicate, object, graph);\n    return results;\n  }\n\n  // ### `forSubjects` executes the callback on all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forSubjects(callback, predicate, object, graph) {\n    // Convert terms to internal string representation\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, predicateId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (predicateId) {\n          if (objectId)\n            // If predicate and object are given, the POS index is best.\n            this._loopBy2Keys(content.predicates, predicateId, objectId, callback);\n          else\n            // If only predicate is given, the SPO index is best.\n            this._loopByKey1(content.subjects, predicateId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the OSP index is best.\n          this._loopByKey0(content.objects, objectId, callback);\n        else\n          // If no params given, iterate all the subjects\n          this._loop(content.subjects, callback);\n      }\n    }\n  }\n\n  // ### `getPredicates` returns all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getPredicates(subject, object, graph) {\n    const results = [];\n    this.forPredicates(p => { results.push(p); }, subject, object, graph);\n    return results;\n  }\n\n  // ### `forPredicates` executes the callback on all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forPredicates(callback, subject, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, subjectId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject) && !(subjectId = ids[subject]) ||\n        isString(object)  && !(objectId  = ids[object]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the OSP index is best.\n            this._loopBy2Keys(content.objects, objectId, subjectId, callback);\n          else\n            // If only subject is given, the SPO index is best.\n            this._loopByKey0(content.subjects, subjectId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the POS index is best.\n          this._loopByKey1(content.predicates, objectId, callback);\n        else\n          // If no params given, iterate all the predicates.\n          this._loop(content.predicates, callback);\n      }\n    }\n  }\n\n  // ### `getObjects` returns all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getObjects(subject, predicate, graph) {\n    const results = [];\n    this.forObjects(o => { results.push(o); }, subject, predicate, graph);\n    return results;\n  }\n\n  // ### `forObjects` executes the callback on all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forObjects(callback, subject, predicate, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, subjectId, predicateId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject]) ||\n        isString(predicate) && !(predicateId = ids[predicate]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (predicateId)\n            // If subject and predicate are given, the SPO index is best.\n            this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);\n          else\n            // If only subject is given, the OSP index is best.\n            this._loopByKey1(content.objects, subjectId, callback);\n        }\n        else if (predicateId)\n          // If only predicate is given, the POS index is best.\n          this._loopByKey0(content.predicates, predicateId, callback);\n        else\n          // If no params given, iterate all the objects.\n          this._loop(content.objects, callback);\n      }\n    }\n  }\n\n  // ### `getGraphs` returns all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getGraphs(subject, predicate, object) {\n    const results = [];\n    this.forGraphs(g => { results.push(g); }, subject, predicate, object);\n    return results;\n  }\n\n  // ### `forGraphs` executes the callback on all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forGraphs(callback, subject, predicate, object) {\n    for (const graph in this._graphs) {\n      this.some(quad => {\n        callback(quad.graph);\n        return true; // Halt iteration of some()\n      }, subject, predicate, object, graph);\n    }\n  }\n\n  // ### `createBlankNode` creates a new blank node, returning its name\n  createBlankNode(suggestedName) {\n    let name, index;\n    // Generate a name based on the suggested name\n    if (suggestedName) {\n      name = suggestedName = `_:${suggestedName}`, index = 1;\n      while (this._ids[name])\n        name = suggestedName + index++;\n    }\n    // Generate a generic blank node name\n    else {\n      do { name = `_:b${this._blankNodeIndex++}`; }\n      while (this._ids[name]);\n    }\n    // Add the blank node to the entities, avoiding the generation of duplicates\n    this._ids[name] = ++this._id;\n    this._entities[this._id] = name;\n    return this._factory.blankNode(name.substr(2));\n  }\n\n  // ### `extractLists` finds and removes all list triples\n  // and returns the items per list.\n  extractLists({ remove = false, ignoreErrors = false } = {}) {\n    const lists = {}; // has scalar keys so could be a simple Object\n    const onError = ignoreErrors ? (() => true) :\n                  ((node, message) => { throw new Error(`${node.value} ${message}`); });\n\n    // Traverse each list from its tail\n    const tails = this.getQuads(null, namespaces.rdf.rest, namespaces.rdf.nil, null);\n    const toRemove = remove ? [...tails] : [];\n    tails.forEach(tailQuad => {\n      const items = [];             // the members found as objects of rdf:first quads\n      let malformed = false;      // signals whether the current list is malformed\n      let head;                   // the head of the list (_:b1 in above example)\n      let headPos;                // set to subject or object when head is set\n      const graph = tailQuad.graph; // make sure list is in exactly one graph\n\n      // Traverse the list from tail to end\n      let current = tailQuad.subject;\n      while (current && !malformed) {\n        const objectQuads = this.getQuads(null, null, current, null);\n        const subjectQuads = this.getQuads(current, null, null, null);\n        let quad, first = null, rest = null, parent = null;\n\n        // Find the first and rest of this list node\n        for (let i = 0; i < subjectQuads.length && !malformed; i++) {\n          quad = subjectQuads[i];\n          if (!quad.graph.equals(graph))\n            malformed = onError(current, 'not confined to single graph');\n          else if (head)\n            malformed = onError(current, 'has non-list arcs out');\n\n          // one rdf:first\n          else if (quad.predicate.value === namespaces.rdf.first) {\n            if (first)\n              malformed = onError(current, 'has multiple rdf:first arcs');\n            else\n              toRemove.push(first = quad);\n          }\n\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (rest)\n              malformed = onError(current, 'has multiple rdf:rest arcs');\n            else\n              toRemove.push(rest = quad);\n          }\n\n          // alien triple\n          else if (objectQuads.length)\n            malformed = onError(current, 'can\\'t be subject and object');\n          else {\n            head = quad; // e.g. { (1 2 3) :p :o }\n            headPos = 'subject';\n          }\n        }\n\n        // { :s :p (1 2) } arrives here with no head\n        // { (1 2) :p :o } arrives here with head set to the list.\n        for (let i = 0; i < objectQuads.length && !malformed; ++i) {\n          quad = objectQuads[i];\n          if (head)\n            malformed = onError(current, 'can\\'t have coreferences');\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (parent)\n              malformed = onError(current, 'has incoming rdf:rest arcs');\n            else\n              parent = quad;\n          }\n          else {\n            head = quad; // e.g. { :s :p (1 2) }\n            headPos = 'object';\n          }\n        }\n\n        // Store the list item and continue with parent\n        if (!first)\n          malformed = onError(current, 'has no list head');\n        else\n          items.unshift(first.object);\n        current = parent && parent.subject;\n      }\n\n      // Don't remove any quads if the list is malformed\n      if (malformed)\n        remove = false;\n      // Store the list under the value of its head\n      else if (head)\n        lists[head[headPos].value] = items;\n    });\n\n    // Remove list quads if requested\n    if (remove)\n      this.removeQuads(toRemove);\n    return lists;\n  }\n\n  // ### Store is an iterable.\n  // Can be used where iterables are expected: for...of loops, array spread operator,\n  // `yield*`, and destructuring assignment (order is not guaranteed).\n  *[Symbol.iterator]() {\n    yield* this.getQuads();\n  }\n}\n\n// Determines whether the argument is a string\nfunction isString(s) {\n  return typeof s === 'string' || s instanceof String;\n}\n\n/**\n * A class that implements both DatasetCore and Readable.\n */\nclass DatasetCoreAndReadableStream extends Readable {\n  constructor(n3Store, subject, predicate, object, graph) {\n    super({ objectMode: true });\n    Object.assign(this, { n3Store, subject, predicate, object, graph });\n  }\n\n  get filtered() {\n    if (!this._filtered) {\n      const { n3Store, graph, object, predicate, subject } = this;\n      const quads = n3Store.getQuads(subject, predicate, object, graph);\n      this._filtered = new N3Store(quads, { factory: n3Store._factory });\n    }\n    return this._filtered;\n  }\n  get size() {\n    return this.filtered.size;\n  }\n\n  _read() {\n    for (const quad of this.filtered.getQuads())\n      this.push(quad);\n    this.push(null);\n  }\n\n  add(quad) {\n    return this.filtered.add(quad);\n  }\n\n  delete(quad) {\n    return this.filtered.delete(quad);\n  }\n\n  has(quad) {\n    return this.filtered.has(quad);\n  }\n\n  match(subject, predicate, object, graph) {\n    return new DatasetCoreAndReadableStream(this.filtered, subject, predicate, object, graph);\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.filtered.getQuads();\n  }\n}\n","// **N3StreamParser** parses a text stream into a quad stream.\nimport N3Parser from './N3Parser';\nimport { Transform } from 'readable-stream';\n\n// ## Constructor\nexport default class N3StreamParser extends Transform {\n  constructor(options) {\n    super({ decodeStrings: true });\n    this._readableState.objectMode = true;\n\n    // Set up parser with dummy stream to obtain `data` and `end` callbacks\n    const parser = new N3Parser(options);\n    let onData, onEnd;\n    parser.parse({\n      on: (event, callback) => {\n        switch (event) {\n        case 'data': onData = callback; break;\n        case 'end':   onEnd = callback; break;\n        }\n      },\n    },\n      // Handle quads by pushing them down the pipeline\n      (error, quad) => { error && this.emit('error', error) || quad && this.push(quad); },\n      // Emit prefixes through the `prefix` event\n      (prefix, uri) => { this.emit('prefix', prefix, uri); }\n    );\n\n    // Implement Transform methods through parser callbacks\n    this._transform = (chunk, encoding, done) => { onData(chunk); done(); };\n    this._flush = done => { onEnd(); done(); };\n  }\n\n  // ### Parses a stream of strings\n  import(stream) {\n    stream.on('data',  chunk => { this.write(chunk); });\n    stream.on('end',   ()      => { this.end(); });\n    stream.on('error', error => { this.emit('error', error); });\n    return this;\n  }\n}\n","// **N3StreamWriter** serializes a quad stream into a text stream.\nimport { Transform } from 'readable-stream';\nimport N3Writer from './N3Writer';\n\n// ## Constructor\nexport default class N3StreamWriter extends Transform {\n  constructor(options) {\n    super({ encoding: 'utf8', writableObjectMode: true });\n\n    // Set up writer with a dummy stream object\n    const writer = this._writer = new N3Writer({\n      write: (quad, encoding, callback) => { this.push(quad); callback && callback(); },\n      end: callback => { this.push(null); callback && callback(); },\n    }, options);\n\n    // Implement Transform methods on top of writer\n    this._transform = (quad, encoding, done) => { writer.addQuad(quad, done); };\n    this._flush = done => { writer.end(done); };\n  }\n\n// ### Serializes a stream of quads\n  import(stream) {\n    stream.on('data',   quad => { this.write(quad); });\n    stream.on('end',    () => { this.end(); });\n    stream.on('error',  error => { this.emit('error', error); });\n    stream.on('prefix', (prefix, iri) => { this._writer.addPrefix(prefix, iri); });\n    return this;\n  }\n}\n","import Lexer from './N3Lexer';\nimport Parser from './N3Parser';\nimport Writer from './N3Writer';\nimport Store from './N3Store';\nimport StreamParser from './N3StreamParser';\nimport StreamWriter from './N3StreamWriter';\nimport * as Util from './N3Util';\n\nimport {\n  default as DataFactory,\n\n  Term,\n  NamedNode,\n  Literal,\n  BlankNode,\n  Variable,\n  DefaultGraph,\n  Quad,\n  Triple,\n\n  termFromId,\n  termToId,\n} from './N3DataFactory';\n\nexport {\n  Lexer,\n  Parser,\n  Writer,\n  Store,\n  StreamParser,\n  StreamWriter,\n  Util,\n\n  DataFactory,\n\n  Term,\n  NamedNode,\n  Literal,\n  BlankNode,\n  Variable,\n  DefaultGraph,\n  Quad,\n  Triple,\n\n  termFromId,\n  termToId,\n};\n"]}